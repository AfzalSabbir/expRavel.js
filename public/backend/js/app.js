/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./public/backend/js/custom.js":
/*!*************************************!*\
  !*** ./public/backend/js/custom.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("$(document).ready(function () {\n  /**\r\n   * Delete alert\r\n   * @param parameter to delete\r\n   */\n  deleteMethod = function deleteMethod(encrypted_id) {\n    swal({\n      title: \"Are you sure?\",\n      text: \"This data will be deleted permanently!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true\n    }).then(function (willDelete) {\n      if (willDelete) {\n        window.location = window.location.pathname + '/delete/' + encrypted_id;\n      }\n    });\n  };\n  /**\r\n   * Inactive alert\r\n   * @param parameter to inactive\r\n   */\n\n\n  inactiveMethod = function inactiveMethod(encrypted_id) {\n    swal({\n      title: \"Are you sure?\",\n      text: \"After Removing, You can recover by updating STATUS!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true\n    }).then(function (willDelete) {\n      if (willDelete) {\n        window.location = window.location.pathname + '/inactive/' + encrypted_id;\n      }\n    });\n  };\n  /**\r\n   *  All About Search\r\n   */\n\n\n  $('#searchField').prop('selectedIndex', 0); // Reset Search Select\n\n  var searchItems = \"&nbsp;\" + \"disableed\";\n  var countSelect = 0;\n  $(\"select\").change(function () {\n    var newField = '&nbsp' + $(this).val() + '&nbsp';\n\n    if (newField != null && newField != \"\") {\n      var name = $(this).val();\n      var placeholder = $(\"#searchField option:selected\").text();\n      var html = \"<div style=\\\"margin: 4px 0;\\\" class=\\\"col-md-2\\\">\\n\" + \"<input id='search' type=\\\"text\\\" name=\\\"\" + name + \"\\\" placeholder=\\\"\" + placeholder + \"\\\" class=\\\"form-control\\\">\\n\" + \"</div>\";\n\n      if (searchItems.indexOf(newField) == -1) {\n        countSelect = countSelect + 1;\n        $(\".search-field\").append(html);\n        $(\"#searchForm\").show();\n        $(\"#searchButton\").show();\n        searchItems = searchItems + newField + '&nbsp;';\n\n        if (countSelect > 5) {\n          $(\"#searchButton\").css({//'margin-left': '5px',\n            //'margin-top': '5px'\n          });\n        }\n      }\n    }\n  });\n  /*\r\n  * Avro Bangla\r\n  */\n\n  $('input[type=text], input[type=number], input[type=email], input[type=search]').focus(function () {\n    if ($(this).hasClass('avro_bn')) {\n      $('.lang_pen').text('বাংলা ');\n      $('.lang_pen_parent').show();\n    } else {\n      $('.lang_pen').text('Eng ');\n      $('.lang_pen_parent').show();\n    }\n\n    $(this).blur(function () {\n      $('.lang_pen_parent').hide();\n    });\n  });\n  $('textarea').focus(function () {\n    if ($(this).hasClass('avro_bn')) {\n      $('.lang_pen').text('বাংলা ');\n      $('.lang_pen_parent').show();\n    } else {\n      $('.lang_pen').text('Eng ');\n      $('.lang_pen_parent').show();\n    }\n\n    $(this).blur(function () {\n      $('.lang_pen_parent').hide();\n    });\n  }); // alert($('h1').children('i').attr('class'));\n\n  $(window).scroll(function () {\n    if ($(window).width() >= 768) {\n      if ($(window).scrollTop() > $('.app-header').height() - 30 + $('.card-header').height() +\n      /*$('.app-title').height() +*/\n      parseInt($('.app-title').css('margin-bottom'))) {\n        $('.app-nav_custom_item').fadeIn().html('<i class=\"' + $('h1').children('i').attr('class') + '\"></i>' + $('.card-header .row .col-md-6 h2').text());\n      } else {\n        $('.app-nav_custom_item').fadeOut();\n      }\n    }\n  });\n});\nVue.config.productionTip = false;\n$(document).ready(function () {\n  var table = $('#datatable').DataTable({\n    // \"scrollY\": \"350px\",\n    \"paging\": true,\n    \"pageLength\": 50,\n    \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n  });\n  $('a.toggle-vis').on('click', function (e) {\n    e.preventDefault(); // Get the column API object\n\n    var column = table.column($(this).attr('data-column')); // Toggle the visibility\n\n    column.visible(!column.visible());\n  });\n});\n$(document).ready(function () {\n  $(\"body\").tooltip({\n    selector: '[data-toggle=tooltip]'\n  });\n  $(\".simplebar-content\").click(function () {\n    if ($(\".simplebar-offset\").css('bottom') == '-17px') {\n      document.getElementById('app-sidebar__toggle').click();\n    }\n  });\n  $(\".simplebar-content\").hover(function () {\n    if ($(\".simplebar-offset\").css('bottom') == '-17px') {\n      document.getElementById('app-sidebar__toggle').click();\n    }\n  });\n});\n/*javascript pluralize a string*/\n\nString.prototype.plural = function (revert) {\n  var plural = {\n    '(quiz)$': \"$1zes\",\n    '^(ox)$': \"$1en\",\n    '([m|l])ouse$': \"$1ice\",\n    '(matr|vert|ind)ix|ex$': \"$1ices\",\n    '(x|ch|ss|sh)$': \"$1es\",\n    '([^aeiouy]|qu)y$': \"$1ies\",\n    '(hive)$': \"$1s\",\n    '(?:([^f])fe|([lr])f)$': \"$1$2ves\",\n    '(shea|lea|loa|thie)f$': \"$1ves\",\n    'sis$': \"ses\",\n    '([ti])um$': \"$1a\",\n    '(tomat|potat|ech|her|vet)o$': \"$1oes\",\n    '(bu)s$': \"$1ses\",\n    '(alias)$': \"$1es\",\n    '(octop)us$': \"$1i\",\n    '(ax|test)is$': \"$1es\",\n    '(us)$': \"$1es\",\n    '([^s]+)$': \"$1s\"\n  };\n  var singular = {\n    '(quiz)zes$': \"$1\",\n    '(matr)ices$': \"$1ix\",\n    '(vert|ind)ices$': \"$1ex\",\n    '^(ox)en$': \"$1\",\n    '(alias)es$': \"$1\",\n    '(octop|vir)i$': \"$1us\",\n    '(cris|ax|test)es$': \"$1is\",\n    '(shoe)s$': \"$1\",\n    '(o)es$': \"$1\",\n    '(bus)es$': \"$1\",\n    '([m|l])ice$': \"$1ouse\",\n    '(x|ch|ss|sh)es$': \"$1\",\n    '(m)ovies$': \"$1ovie\",\n    '(s)eries$': \"$1eries\",\n    '([^aeiouy]|qu)ies$': \"$1y\",\n    '([lr])ves$': \"$1f\",\n    '(tive)s$': \"$1\",\n    '(hive)s$': \"$1\",\n    '(li|wi|kni)ves$': \"$1fe\",\n    '(shea|loa|lea|thie)ves$': \"$1f\",\n    '(^analy)ses$': \"$1sis\",\n    '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': \"$1$2sis\",\n    '([ti])a$': \"$1um\",\n    '(n)ews$': \"$1ews\",\n    '(h|bl)ouses$': \"$1ouse\",\n    '(corpse)s$': \"$1\",\n    '(us)es$': \"$1\",\n    's$': \"\"\n  };\n  var irregular = {\n    'move': 'moves',\n    'foot': 'feet',\n    'goose': 'geese',\n    'sex': 'sexes',\n    'child': 'children',\n    'man': 'men',\n    'tooth': 'teeth',\n    'person': 'people'\n  };\n  var uncountable = ['sheep', 'fish', 'deer', 'moose', 'series', 'species', 'money', 'rice', 'information', 'equipment']; // save some time in the case that singular and plural are the same\n\n  if (uncountable.indexOf(this.toLowerCase()) >= 0) return this; // check for irregular forms\n\n  for (word in irregular) {\n    if (revert) {\n      var pattern = new RegExp(irregular[word] + '$', 'i');\n      var replace = word;\n    } else {\n      var pattern = new RegExp(word + '$', 'i');\n      var replace = irregular[word];\n    }\n\n    if (pattern.test(this)) return this.replace(pattern, replace);\n  }\n\n  if (revert) var array = singular;else var array = plural; // check for matches using regular expressions\n\n  for (reg in array) {\n    var pattern = new RegExp(reg, 'i');\n    if (pattern.test(this)) return this.replace(pattern, array[reg]);\n  }\n\n  return this;\n};\n\n$(document).ready(function () {\n  var table = '';\n  var a_index = 0;\n  var column = 0;\n  /*checking wheather datatable has been called or not*/\n\n  if ($('.card-body[data-my-table=\"table-1\"]').find('#datatable').length == 0) {\n    /*showing my pagination*/\n    $('.custom_pagination').show();\n    /*table search*/\n\n    $(\"#my-table-search\").on(\"keyup\", function () {\n      var value = $(this).val().toLowerCase();\n      $(\"#my-table tbody tr\").filter(function () {\n        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);\n      });\n    });\n  }\n  /*coloring column title on hide/show*/\n\n\n  $('.toggle-vis').click(function (event) {\n    table = $(this).closest('.card').find('table');\n    if ($(this).hasClass('text-danger')) $(this).removeClass('text-danger');else $(this).addClass('text-danger'); //a_index = $(this).index();\n\n    column = parseInt($(this).closest('a').attr('data-column')) + 1; // console.log(column);\n\n    if (\n    /*document.getElementById('pagination_container') && */\n    table.attr('id') != 'datatable') {\n      table.find('td:nth-child(' + column + ')').each(function () {\n        $(this).toggle();\n      });\n      table.find('th:nth-child(' + column + ')').toggle();\n    }\n  });\n  $('.toggle-vis').each(function () {\n    if ($(this).hasClass('hide-on-load')) $(this).click();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/backend/js/custom.js\n");

/***/ }),

/***/ "./public/backend/js/main.js":
/*!***********************************!*\
  !*** ./public/backend/js/main.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  var treeviewMenu = $('.app-menu'); // Toggle Sidebar\n\n  $('[data-toggle=\"sidebar\"]').click(function (event) {\n    event.preventDefault();\n    $('.app').toggleClass('sidenav-toggled');\n  }); // Activate sidebar treeview toggle\n\n  $(\"[data-toggle='treeview']\").click(function (event) {\n    event.preventDefault();\n\n    if (!$(this).parent().hasClass('is-expanded')) {\n      treeviewMenu.find(\"[data-toggle='treeview']\").parent().removeClass('is-expanded');\n    }\n\n    $(this).parent().toggleClass('is-expanded');\n  }); // Set initial active toggle\n\n  $(\"[data-toggle='treeview.'].is-expanded\").parent().toggleClass('is-expanded'); //Activate bootstrip tooltips\n\n  $(\"[data-toggle='tooltip']\").tooltip();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvYmFja2VuZC9qcy9tYWluLmpzPzE0OGQiXSwibmFtZXMiOlsidHJlZXZpZXdNZW51IiwiJCIsImNsaWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInRvZ2dsZUNsYXNzIiwicGFyZW50IiwiaGFzQ2xhc3MiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJ0b29sdGlwIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFDLFlBQVk7QUFDWjs7QUFDQSxNQUFJQSxZQUFZLEdBQUdDLENBQUMsQ0FBQyxXQUFELENBQXBCLENBRlksQ0FJWjs7QUFDQUEsR0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJDLEtBQTdCLENBQW1DLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbERBLFNBQUssQ0FBQ0MsY0FBTjtBQUNBSCxLQUFDLENBQUMsTUFBRCxDQUFELENBQVVJLFdBQVYsQ0FBc0IsaUJBQXRCO0FBQ0EsR0FIRCxFQUxZLENBVVo7O0FBQ0FKLEdBQUMsQ0FBQywwQkFBRCxDQUFELENBQThCQyxLQUE5QixDQUFvQyxVQUFTQyxLQUFULEVBQWdCO0FBQ25EQSxTQUFLLENBQUNDLGNBQU47O0FBQ0EsUUFBRyxDQUFDSCxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFLLE1BQVIsR0FBaUJDLFFBQWpCLENBQTBCLGFBQTFCLENBQUosRUFBOEM7QUFDN0NQLGtCQUFZLENBQUNRLElBQWIsQ0FBa0IsMEJBQWxCLEVBQThDRixNQUE5QyxHQUF1REcsV0FBdkQsQ0FBbUUsYUFBbkU7QUFDQTs7QUFDRFIsS0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSyxNQUFSLEdBQWlCRCxXQUFqQixDQUE2QixhQUE3QjtBQUNBLEdBTkQsRUFYWSxDQW1CWjs7QUFDQUosR0FBQyxDQUFDLHVDQUFELENBQUQsQ0FBMkNLLE1BQTNDLEdBQW9ERCxXQUFwRCxDQUFnRSxhQUFoRSxFQXBCWSxDQXNCWjs7QUFDQUosR0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJTLE9BQTdCO0FBRUEsQ0F6QkQiLCJmaWxlIjoiLi9wdWJsaWMvYmFja2VuZC9qcy9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHR2YXIgdHJlZXZpZXdNZW51ID0gJCgnLmFwcC1tZW51Jyk7XHJcblxyXG5cdC8vIFRvZ2dsZSBTaWRlYmFyXHJcblx0JCgnW2RhdGEtdG9nZ2xlPVwic2lkZWJhclwiXScpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0JCgnLmFwcCcpLnRvZ2dsZUNsYXNzKCdzaWRlbmF2LXRvZ2dsZWQnKTtcclxuXHR9KTtcclxuXHJcblx0Ly8gQWN0aXZhdGUgc2lkZWJhciB0cmVldmlldyB0b2dnbGVcclxuXHQkKFwiW2RhdGEtdG9nZ2xlPSd0cmVldmlldyddXCIpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0aWYoISQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWV4cGFuZGVkJykpIHtcclxuXHRcdFx0dHJlZXZpZXdNZW51LmZpbmQoXCJbZGF0YS10b2dnbGU9J3RyZWV2aWV3J11cIikucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2lzLWV4cGFuZGVkJyk7XHJcblx0XHR9XHJcblx0XHQkKHRoaXMpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCdpcy1leHBhbmRlZCcpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTZXQgaW5pdGlhbCBhY3RpdmUgdG9nZ2xlXHJcblx0JChcIltkYXRhLXRvZ2dsZT0ndHJlZXZpZXcuJ10uaXMtZXhwYW5kZWRcIikucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ2lzLWV4cGFuZGVkJyk7XHJcblxyXG5cdC8vQWN0aXZhdGUgYm9vdHN0cmlwIHRvb2x0aXBzXHJcblx0JChcIltkYXRhLXRvZ2dsZT0ndG9vbHRpcCddXCIpLnRvb2x0aXAoKTtcclxuXHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/backend/js/main.js\n");

/***/ }),

/***/ "./public/backend/js/simplebar.js":
/*!****************************************!*\
  !*** ./public/backend/js/simplebar.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * SimpleBar.js - v5.1.0\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\n(function (global, factory) {\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);\n})(this, function () {\n  'use strict';\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  var O = 'object';\n\n  var check = function check(it) {\n    return it && it.Math == Math && it;\n  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\n\n  var global_1 = // eslint-disable-next-line no-undef\n  check((typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) == O && globalThis) || check((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) == O && window) || check((typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == O && self) || check(_typeof(commonjsGlobal) == O && commonjsGlobal) || // eslint-disable-next-line no-new-func\n  Function('return this')();\n\n  var fails = function fails(exec) {\n    try {\n      return !!exec();\n    } catch (error) {\n      return true;\n    }\n  }; // Thank's IE8 for his funny defineProperty\n\n\n  var descriptors = !fails(function () {\n    return Object.defineProperty({}, 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;\n  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug\n\n  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({\n    1: 2\n  }, 1); // `Object.prototype.propertyIsEnumerable` method implementation\n  // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\n\n  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n    var descriptor = getOwnPropertyDescriptor(this, V);\n    return !!descriptor && descriptor.enumerable;\n  } : nativePropertyIsEnumerable;\n  var objectPropertyIsEnumerable = {\n    f: f\n  };\n\n  var createPropertyDescriptor = function createPropertyDescriptor(bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var toString = {}.toString;\n\n  var classofRaw = function classofRaw(it) {\n    return toString.call(it).slice(8, -1);\n  };\n\n  var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n  var indexedObject = fails(function () {\n    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n    // eslint-disable-next-line no-prototype-builtins\n    return !Object('z').propertyIsEnumerable(0);\n  }) ? function (it) {\n    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);\n  } : Object; // `RequireObjectCoercible` abstract operation\n  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible\n\n  var requireObjectCoercible = function requireObjectCoercible(it) {\n    if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n    return it;\n  }; // toObject with fallback for non-array-like ES3 strings\n\n\n  var toIndexedObject = function toIndexedObject(it) {\n    return indexedObject(requireObjectCoercible(it));\n  };\n\n  var isObject = function isObject(it) {\n    return _typeof(it) === 'object' ? it !== null : typeof it === 'function';\n  }; // `ToPrimitive` abstract operation\n  // https://tc39.github.io/ecma262/#sec-toprimitive\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n\n\n  var toPrimitive = function toPrimitive(input, PREFERRED_STRING) {\n    if (!isObject(input)) return input;\n    var fn, val;\n    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  var has = function has(it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var document$1 = global_1.document; // typeof document.createElement is 'object' in old IE\n\n  var EXISTS = isObject(document$1) && isObject(document$1.createElement);\n\n  var documentCreateElement = function documentCreateElement(it) {\n    return EXISTS ? document$1.createElement(it) : {};\n  }; // Thank's IE8 for his funny defineProperty\n\n\n  var ie8DomDefine = !descriptors && !fails(function () {\n    return Object.defineProperty(documentCreateElement('div'), 'a', {\n      get: function get() {\n        return 7;\n      }\n    }).a != 7;\n  });\n  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n\n  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n    O = toIndexedObject(O);\n    P = toPrimitive(P, true);\n    if (ie8DomDefine) try {\n      return nativeGetOwnPropertyDescriptor(O, P);\n    } catch (error) {\n      /* empty */\n    }\n    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);\n  };\n  var objectGetOwnPropertyDescriptor = {\n    f: f$1\n  };\n\n  var anObject = function anObject(it) {\n    if (!isObject(it)) {\n      throw TypeError(String(it) + ' is not an object');\n    }\n\n    return it;\n  };\n\n  var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n\n  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n    anObject(O);\n    P = toPrimitive(P, true);\n    anObject(Attributes);\n    if (ie8DomDefine) try {\n      return nativeDefineProperty(O, P, Attributes);\n    } catch (error) {\n      /* empty */\n    }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n  var objectDefineProperty = {\n    f: f$2\n  };\n  var hide = descriptors ? function (object, key, value) {\n    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var setGlobal = function setGlobal(key, value) {\n    try {\n      hide(global_1, key, value);\n    } catch (error) {\n      global_1[key] = value;\n    }\n\n    return value;\n  };\n\n  var shared = createCommonjsModule(function (module) {\n    var SHARED = '__core-js_shared__';\n    var store = global_1[SHARED] || setGlobal(SHARED, {});\n    (module.exports = function (key, value) {\n      return store[key] || (store[key] = value !== undefined ? value : {});\n    })('versions', []).push({\n      version: '3.2.1',\n      mode: 'global',\n      copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n    });\n  });\n  var functionToString = shared('native-function-to-string', Function.toString);\n  var WeakMap$1 = global_1.WeakMap;\n  var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(functionToString.call(WeakMap$1));\n  var id = 0;\n  var postfix = Math.random();\n\n  var uid = function uid(key) {\n    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n  };\n\n  var keys = shared('keys');\n\n  var sharedKey = function sharedKey(key) {\n    return keys[key] || (keys[key] = uid(key));\n  };\n\n  var hiddenKeys = {};\n  var WeakMap$2 = global_1.WeakMap;\n  var set, get, has$1;\n\n  var enforce = function enforce(it) {\n    return has$1(it) ? get(it) : set(it, {});\n  };\n\n  var getterFor = function getterFor(TYPE) {\n    return function (it) {\n      var state;\n\n      if (!isObject(it) || (state = get(it)).type !== TYPE) {\n        throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n      }\n\n      return state;\n    };\n  };\n\n  if (nativeWeakMap) {\n    var store = new WeakMap$2();\n    var wmget = store.get;\n    var wmhas = store.has;\n    var wmset = store.set;\n\n    set = function set(it, metadata) {\n      wmset.call(store, it, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return wmget.call(store, it) || {};\n    };\n\n    has$1 = function has$1(it) {\n      return wmhas.call(store, it);\n    };\n  } else {\n    var STATE = sharedKey('state');\n    hiddenKeys[STATE] = true;\n\n    set = function set(it, metadata) {\n      hide(it, STATE, metadata);\n      return metadata;\n    };\n\n    get = function get(it) {\n      return has(it, STATE) ? it[STATE] : {};\n    };\n\n    has$1 = function has$1(it) {\n      return has(it, STATE);\n    };\n  }\n\n  var internalState = {\n    set: set,\n    get: get,\n    has: has$1,\n    enforce: enforce,\n    getterFor: getterFor\n  };\n  var redefine = createCommonjsModule(function (module) {\n    var getInternalState = internalState.get;\n    var enforceInternalState = internalState.enforce;\n    var TEMPLATE = String(functionToString).split('toString');\n    shared('inspectSource', function (it) {\n      return functionToString.call(it);\n    });\n    (module.exports = function (O, key, value, options) {\n      var unsafe = options ? !!options.unsafe : false;\n      var simple = options ? !!options.enumerable : false;\n      var noTargetGet = options ? !!options.noTargetGet : false;\n\n      if (typeof value == 'function') {\n        if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);\n        enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n      }\n\n      if (O === global_1) {\n        if (simple) O[key] = value;else setGlobal(key, value);\n        return;\n      } else if (!unsafe) {\n        delete O[key];\n      } else if (!noTargetGet && O[key]) {\n        simple = true;\n      }\n\n      if (simple) O[key] = value;else hide(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n    })(Function.prototype, 'toString', function toString() {\n      return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);\n    });\n  });\n  var path = global_1;\n\n  var aFunction = function aFunction(variable) {\n    return typeof variable == 'function' ? variable : undefined;\n  };\n\n  var getBuiltIn = function getBuiltIn(namespace, method) {\n    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace]) : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];\n  };\n\n  var ceil = Math.ceil;\n  var floor = Math.floor; // `ToInteger` abstract operation\n  // https://tc39.github.io/ecma262/#sec-tointeger\n\n  var toInteger = function toInteger(argument) {\n    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n  };\n\n  var min = Math.min; // `ToLength` abstract operation\n  // https://tc39.github.io/ecma262/#sec-tolength\n\n  var toLength = function toLength(argument) {\n    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min; // Helper for a popular repeating case of the spec:\n  // Let integer be ? ToInteger(index).\n  // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).\n\n  var toAbsoluteIndex = function toAbsoluteIndex(index, length) {\n    var integer = toInteger(index);\n    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\n  }; // `Array.prototype.{ indexOf, includes }` methods implementation\n\n\n  var createMethod = function createMethod(IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = toIndexedObject($this);\n      var length = toLength(O.length);\n      var index = toAbsoluteIndex(fromIndex, length);\n      var value; // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++]; // eslint-disable-next-line no-self-compare\n\n        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not\n      } else for (; length > index; index++) {\n        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n      }\n      return !IS_INCLUDES && -1;\n    };\n  };\n\n  var arrayIncludes = {\n    // `Array.prototype.includes` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n    includes: createMethod(true),\n    // `Array.prototype.indexOf` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n    indexOf: createMethod(false)\n  };\n  var indexOf = arrayIncludes.indexOf;\n\n  var objectKeysInternal = function objectKeysInternal(object, names) {\n    var O = toIndexedObject(object);\n    var i = 0;\n    var result = [];\n    var key;\n\n    for (key in O) {\n      !has(hiddenKeys, key) && has(O, key) && result.push(key);\n    } // Don't enum bug & hidden keys\n\n\n    while (names.length > i) {\n      if (has(O, key = names[i++])) {\n        ~indexOf(result, key) || result.push(key);\n      }\n    }\n\n    return result;\n  }; // IE8- don't enum bug keys\n\n\n  var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];\n  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n\n  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return objectKeysInternal(O, hiddenKeys$1);\n  };\n\n  var objectGetOwnPropertyNames = {\n    f: f$3\n  };\n  var f$4 = Object.getOwnPropertySymbols;\n  var objectGetOwnPropertySymbols = {\n    f: f$4\n  }; // all object keys, includes non-enumerable and symbols\n\n  var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n    var keys = objectGetOwnPropertyNames.f(anObject(it));\n    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n  };\n\n  var copyConstructorProperties = function copyConstructorProperties(target, source) {\n    var keys = ownKeys(source);\n    var defineProperty = objectDefineProperty.f;\n    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  };\n\n  var replacement = /#|\\.prototype\\./;\n\n  var isForced = function isForced(feature, detection) {\n    var value = data[normalize(feature)];\n    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;\n  };\n\n  var normalize = isForced.normalize = function (string) {\n    return String(string).replace(replacement, '.').toLowerCase();\n  };\n\n  var data = isForced.data = {};\n  var NATIVE = isForced.NATIVE = 'N';\n  var POLYFILL = isForced.POLYFILL = 'P';\n  var isForced_1 = isForced;\n  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\n  /*\n    options.target      - name of the target object\n    options.global      - target is the global object\n    options.stat        - export as static methods of target\n    options.proto       - export as prototype methods of target\n    options.real        - real prototype method for the `pure` version\n    options.forced      - export even if the native feature is available\n    options.bind        - bind methods to the target, required for the `pure` version\n    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n    options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n    options.sham        - add a flag to not completely full polyfills\n    options.enumerable  - export as enumerable property\n    options.noTargetGet - prevent calling a getter on target\n  */\n\n  var _export = function _export(options, source) {\n    var TARGET = options.target;\n    var GLOBAL = options.global;\n    var STATIC = options.stat;\n    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n\n    if (GLOBAL) {\n      target = global_1;\n    } else if (STATIC) {\n      target = global_1[TARGET] || setGlobal(TARGET, {});\n    } else {\n      target = (global_1[TARGET] || {}).prototype;\n    }\n\n    if (target) for (key in source) {\n      sourceProperty = source[key];\n\n      if (options.noTargetGet) {\n        descriptor = getOwnPropertyDescriptor$1(target, key);\n        targetProperty = descriptor && descriptor.value;\n      } else targetProperty = target[key];\n\n      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\n\n      if (!FORCED && targetProperty !== undefined) {\n        if (_typeof(sourceProperty) === _typeof(targetProperty)) continue;\n        copyConstructorProperties(sourceProperty, targetProperty);\n      } // add a flag to not completely full polyfills\n\n\n      if (options.sham || targetProperty && targetProperty.sham) {\n        hide(sourceProperty, 'sham', true);\n      } // extend global\n\n\n      redefine(target, key, sourceProperty, options);\n    }\n  };\n\n  var aFunction$1 = function aFunction$1(it) {\n    if (typeof it != 'function') {\n      throw TypeError(String(it) + ' is not a function');\n    }\n\n    return it;\n  }; // optional / simple context binding\n\n\n  var bindContext = function bindContext(fn, that, length) {\n    aFunction$1(fn);\n    if (that === undefined) return fn;\n\n    switch (length) {\n      case 0:\n        return function () {\n          return fn.call(that);\n        };\n\n      case 1:\n        return function (a) {\n          return fn.call(that, a);\n        };\n\n      case 2:\n        return function (a, b) {\n          return fn.call(that, a, b);\n        };\n\n      case 3:\n        return function (a, b, c) {\n          return fn.call(that, a, b, c);\n        };\n    }\n\n    return function ()\n    /* ...args */\n    {\n      return fn.apply(that, arguments);\n    };\n  }; // `ToObject` abstract operation\n  // https://tc39.github.io/ecma262/#sec-toobject\n\n\n  var toObject = function toObject(argument) {\n    return Object(requireObjectCoercible(argument));\n  }; // `IsArray` abstract operation\n  // https://tc39.github.io/ecma262/#sec-isarray\n\n\n  var isArray = Array.isArray || function isArray(arg) {\n    return classofRaw(arg) == 'Array';\n  };\n\n  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {\n    // Chrome 38 Symbol has incorrect toString conversion\n    // eslint-disable-next-line no-undef\n    return !String(Symbol());\n  });\n  var Symbol$1 = global_1.Symbol;\n  var store$1 = shared('wks');\n\n  var wellKnownSymbol = function wellKnownSymbol(name) {\n    return store$1[name] || (store$1[name] = nativeSymbol && Symbol$1[name] || (nativeSymbol ? Symbol$1 : uid)('Symbol.' + name));\n  };\n\n  var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation\n  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate\n\n  var arraySpeciesCreate = function arraySpeciesCreate(originalArray, length) {\n    var C;\n\n    if (isArray(originalArray)) {\n      C = originalArray.constructor; // cross-realm fallback\n\n      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {\n        C = C[SPECIES];\n        if (C === null) C = undefined;\n      }\n    }\n\n    return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n  };\n\n  var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\n\n  var createMethod$1 = function createMethod$1(TYPE) {\n    var IS_MAP = TYPE == 1;\n    var IS_FILTER = TYPE == 2;\n    var IS_SOME = TYPE == 3;\n    var IS_EVERY = TYPE == 4;\n    var IS_FIND_INDEX = TYPE == 6;\n    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n    return function ($this, callbackfn, that, specificCreate) {\n      var O = toObject($this);\n      var self = indexedObject(O);\n      var boundFunction = bindContext(callbackfn, that, 3);\n      var length = toLength(self.length);\n      var index = 0;\n      var create = specificCreate || arraySpeciesCreate;\n      var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n      var value, result;\n\n      for (; length > index; index++) {\n        if (NO_HOLES || index in self) {\n          value = self[index];\n          result = boundFunction(value, index, O);\n\n          if (TYPE) {\n            if (IS_MAP) target[index] = result; // map\n            else if (result) switch (TYPE) {\n                case 3:\n                  return true;\n                // some\n\n                case 5:\n                  return value;\n                // find\n\n                case 6:\n                  return index;\n                // findIndex\n\n                case 2:\n                  push.call(target, value);\n                // filter\n              } else if (IS_EVERY) return false; // every\n          }\n        }\n      }\n\n      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n    };\n  };\n\n  var arrayIteration = {\n    // `Array.prototype.forEach` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n    forEach: createMethod$1(0),\n    // `Array.prototype.map` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.map\n    map: createMethod$1(1),\n    // `Array.prototype.filter` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n    filter: createMethod$1(2),\n    // `Array.prototype.some` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.some\n    some: createMethod$1(3),\n    // `Array.prototype.every` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.every\n    every: createMethod$1(4),\n    // `Array.prototype.find` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.find\n    find: createMethod$1(5),\n    // `Array.prototype.findIndex` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n    findIndex: createMethod$1(6)\n  };\n\n  var sloppyArrayMethod = function sloppyArrayMethod(METHOD_NAME, argument) {\n    var method = [][METHOD_NAME];\n    return !method || !fails(function () {\n      // eslint-disable-next-line no-useless-call,no-throw-literal\n      method.call(null, argument || function () {\n        throw 1;\n      }, 1);\n    });\n  };\n\n  var $forEach = arrayIteration.forEach; // `Array.prototype.forEach` method implementation\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n\n  var arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn\n  /* , thisArg */\n  ) {\n    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  } : [].forEach; // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n\n  _export({\n    target: 'Array',\n    proto: true,\n    forced: [].forEach != arrayForEach\n  }, {\n    forEach: arrayForEach\n  }); // iterable DOM collections\n  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\n\n\n  var domIterables = {\n    CSSRuleList: 0,\n    CSSStyleDeclaration: 0,\n    CSSValueList: 0,\n    ClientRectList: 0,\n    DOMRectList: 0,\n    DOMStringList: 0,\n    DOMTokenList: 1,\n    DataTransferItemList: 0,\n    FileList: 0,\n    HTMLAllCollection: 0,\n    HTMLCollection: 0,\n    HTMLFormElement: 0,\n    HTMLSelectElement: 0,\n    MediaList: 0,\n    MimeTypeArray: 0,\n    NamedNodeMap: 0,\n    NodeList: 1,\n    PaintRequestList: 0,\n    Plugin: 0,\n    PluginArray: 0,\n    SVGLengthList: 0,\n    SVGNumberList: 0,\n    SVGPathSegList: 0,\n    SVGPointList: 0,\n    SVGStringList: 0,\n    SVGTransformList: 0,\n    SourceBufferList: 0,\n    StyleSheetList: 0,\n    TextTrackCueList: 0,\n    TextTrackList: 0,\n    TouchList: 0\n  };\n\n  for (var COLLECTION_NAME in domIterables) {\n    var Collection = global_1[COLLECTION_NAME];\n    var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList\n\n    if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {\n      hide(CollectionPrototype, 'forEach', arrayForEach);\n    } catch (error) {\n      CollectionPrototype.forEach = arrayForEach;\n    }\n  }\n\n  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n  var canUseDom = canUseDOM;\n  var SPECIES$1 = wellKnownSymbol('species');\n\n  var arrayMethodHasSpeciesSupport = function arrayMethodHasSpeciesSupport(METHOD_NAME) {\n    return !fails(function () {\n      var array = [];\n      var constructor = array.constructor = {};\n\n      constructor[SPECIES$1] = function () {\n        return {\n          foo: 1\n        };\n      };\n\n      return array[METHOD_NAME](Boolean).foo !== 1;\n    });\n  };\n\n  var $filter = arrayIteration.filter; // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  // with adding support of @@species\n\n  _export({\n    target: 'Array',\n    proto: true,\n    forced: !arrayMethodHasSpeciesSupport('filter')\n  }, {\n    filter: function filter(callbackfn\n    /* , thisArg */\n    ) {\n      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  }); // `Object.keys` method\n  // https://tc39.github.io/ecma262/#sec-object.keys\n\n\n  var objectKeys = Object.keys || function keys(O) {\n    return objectKeysInternal(O, enumBugKeys);\n  }; // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n\n\n  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n    anObject(O);\n    var keys = objectKeys(Properties);\n    var length = keys.length;\n    var index = 0;\n    var key;\n\n    while (length > index) {\n      objectDefineProperty.f(O, key = keys[index++], Properties[key]);\n    }\n\n    return O;\n  };\n  var html = getBuiltIn('document', 'documentElement');\n  var IE_PROTO = sharedKey('IE_PROTO');\n  var PROTOTYPE = 'prototype';\n\n  var Empty = function Empty() {\n    /* empty */\n  }; // Create object with fake `null` prototype: use iframe Object with cleared prototype\n\n\n  var _createDict = function createDict() {\n    // Thrash, waste and sodomy: IE GC bug\n    var iframe = documentCreateElement('iframe');\n    var length = enumBugKeys.length;\n    var lt = '<';\n    var script = 'script';\n    var gt = '>';\n    var js = 'java' + script + ':';\n    var iframeDocument;\n    iframe.style.display = 'none';\n    html.appendChild(iframe);\n    iframe.src = String(js);\n    iframeDocument = iframe.contentWindow.document;\n    iframeDocument.open();\n    iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);\n    iframeDocument.close();\n    _createDict = iframeDocument.F;\n\n    while (length--) {\n      delete _createDict[PROTOTYPE][enumBugKeys[length]];\n    }\n\n    return _createDict();\n  }; // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n\n\n  var objectCreate = Object.create || function create(O, Properties) {\n    var result;\n\n    if (O !== null) {\n      Empty[PROTOTYPE] = anObject(O);\n      result = new Empty();\n      Empty[PROTOTYPE] = null; // add \"__proto__\" for Object.getPrototypeOf polyfill\n\n      result[IE_PROTO] = O;\n    } else result = _createDict();\n\n    return Properties === undefined ? result : objectDefineProperties(result, Properties);\n  };\n\n  hiddenKeys[IE_PROTO] = true;\n  var UNSCOPABLES = wellKnownSymbol('unscopables');\n  var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]\n  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\n\n  if (ArrayPrototype[UNSCOPABLES] == undefined) {\n    hide(ArrayPrototype, UNSCOPABLES, objectCreate(null));\n  } // add a key to Array.prototype[@@unscopables]\n\n\n  var addToUnscopables = function addToUnscopables(key) {\n    ArrayPrototype[UNSCOPABLES][key] = true;\n  };\n\n  var iterators = {};\n  var correctPrototypeGetter = !fails(function () {\n    function F() {\n      /* empty */\n    }\n\n    F.prototype.constructor = null;\n    return Object.getPrototypeOf(new F()) !== F.prototype;\n  });\n  var IE_PROTO$1 = sharedKey('IE_PROTO');\n  var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method\n  // https://tc39.github.io/ecma262/#sec-object.getprototypeof\n\n  var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {\n    O = toObject(O);\n    if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];\n\n    if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n      return O.constructor.prototype;\n    }\n\n    return O instanceof Object ? ObjectPrototype : null;\n  };\n  var ITERATOR = wellKnownSymbol('iterator');\n  var BUGGY_SAFARI_ITERATORS = false;\n\n  var returnThis = function returnThis() {\n    return this;\n  }; // `%IteratorPrototype%` object\n  // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\n\n\n  var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n  if ([].keys) {\n    arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`\n\n    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {\n      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));\n      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n    }\n  }\n\n  if (IteratorPrototype == undefined) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\n  if (!has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n  var iteratorsCore = {\n    IteratorPrototype: IteratorPrototype,\n    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n  };\n  var defineProperty = objectDefineProperty.f;\n  var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\n  var setToStringTag = function setToStringTag(it, TAG, STATIC) {\n    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n      defineProperty(it, TO_STRING_TAG, {\n        configurable: true,\n        value: TAG\n      });\n    }\n  };\n\n  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;\n\n  var returnThis$1 = function returnThis$1() {\n    return this;\n  };\n\n  var createIteratorConstructor = function createIteratorConstructor(IteratorConstructor, NAME, next) {\n    var TO_STRING_TAG = NAME + ' Iterator';\n    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {\n      next: createPropertyDescriptor(1, next)\n    });\n    setToStringTag(IteratorConstructor, TO_STRING_TAG, false);\n    iterators[TO_STRING_TAG] = returnThis$1;\n    return IteratorConstructor;\n  };\n\n  var aPossiblePrototype = function aPossiblePrototype(it) {\n    if (!isObject(it) && it !== null) {\n      throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n    }\n\n    return it;\n  }; // `Object.setPrototypeOf` method\n  // https://tc39.github.io/ecma262/#sec-object.setprototypeof\n  // Works with __proto__ only. Old v8 can't work with null proto objects.\n\n  /* eslint-disable no-proto */\n\n\n  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n    var CORRECT_SETTER = false;\n    var test = {};\n    var setter;\n\n    try {\n      setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n      setter.call(test, []);\n      CORRECT_SETTER = test instanceof Array;\n    } catch (error) {\n      /* empty */\n    }\n\n    return function setPrototypeOf(O, proto) {\n      anObject(O);\n      aPossiblePrototype(proto);\n      if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;\n      return O;\n    };\n  }() : undefined);\n  var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;\n  var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;\n  var ITERATOR$1 = wellKnownSymbol('iterator');\n  var KEYS = 'keys';\n  var VALUES = 'values';\n  var ENTRIES = 'entries';\n\n  var returnThis$2 = function returnThis$2() {\n    return this;\n  };\n\n  var defineIterator = function defineIterator(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n    createIteratorConstructor(IteratorConstructor, NAME, next);\n\n    var getIterationMethod = function getIterationMethod(KIND) {\n      if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];\n\n      switch (KIND) {\n        case KEYS:\n          return function keys() {\n            return new IteratorConstructor(this, KIND);\n          };\n\n        case VALUES:\n          return function values() {\n            return new IteratorConstructor(this, KIND);\n          };\n\n        case ENTRIES:\n          return function entries() {\n            return new IteratorConstructor(this, KIND);\n          };\n      }\n\n      return function () {\n        return new IteratorConstructor(this);\n      };\n    };\n\n    var TO_STRING_TAG = NAME + ' Iterator';\n    var INCORRECT_VALUES_NAME = false;\n    var IterablePrototype = Iterable.prototype;\n    var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];\n    var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);\n    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n    var CurrentIteratorPrototype, methods, KEY; // fix native\n\n    if (anyNativeIterator) {\n      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));\n\n      if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {\n        if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {\n          if (objectSetPrototypeOf) {\n            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);\n          } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {\n            hide(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);\n          }\n        } // Set @@toStringTag to native iterators\n\n\n        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);\n      }\n    } // fix Array#{values, @@iterator}.name in V8 / FF\n\n\n    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n      INCORRECT_VALUES_NAME = true;\n\n      defaultIterator = function values() {\n        return nativeIterator.call(this);\n      };\n    } // define iterator\n\n\n    if (IterablePrototype[ITERATOR$1] !== defaultIterator) {\n      hide(IterablePrototype, ITERATOR$1, defaultIterator);\n    }\n\n    iterators[NAME] = defaultIterator; // export additional methods\n\n    if (DEFAULT) {\n      methods = {\n        values: getIterationMethod(VALUES),\n        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n        entries: getIterationMethod(ENTRIES)\n      };\n      if (FORCED) for (KEY in methods) {\n        if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n          redefine(IterablePrototype, KEY, methods[KEY]);\n        }\n      } else _export({\n        target: NAME,\n        proto: true,\n        forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME\n      }, methods);\n    }\n\n    return methods;\n  };\n\n  var ARRAY_ITERATOR = 'Array Iterator';\n  var setInternalState = internalState.set;\n  var getInternalState = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.entries\n  // `Array.prototype.keys` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.keys\n  // `Array.prototype.values` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.values\n  // `Array.prototype[@@iterator]` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n  // `CreateArrayIterator` internal method\n  // https://tc39.github.io/ecma262/#sec-createarrayiterator\n\n  var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {\n    setInternalState(this, {\n      type: ARRAY_ITERATOR,\n      target: toIndexedObject(iterated),\n      // target\n      index: 0,\n      // next index\n      kind: kind // kind\n\n    }); // `%ArrayIteratorPrototype%.next` method\n    // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n  }, function () {\n    var state = getInternalState(this);\n    var target = state.target;\n    var kind = state.kind;\n    var index = state.index++;\n\n    if (!target || index >= target.length) {\n      state.target = undefined;\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    if (kind == 'keys') return {\n      value: index,\n      done: false\n    };\n    if (kind == 'values') return {\n      value: target[index],\n      done: false\n    };\n    return {\n      value: [index, target[index]],\n      done: false\n    };\n  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%\n  // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n  // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\n\n  iterators.Arguments = iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\n\n  addToUnscopables('keys');\n  addToUnscopables('values');\n  addToUnscopables('entries');\n  var nativeAssign = Object.assign; // `Object.assign` method\n  // https://tc39.github.io/ecma262/#sec-object.assign\n  // should work with symbols and should have deterministic property order (V8 bug)\n\n  var objectAssign = !nativeAssign || fails(function () {\n    var A = {};\n    var B = {}; // eslint-disable-next-line no-undef\n\n    var symbol = Symbol();\n    var alphabet = 'abcdefghijklmnopqrst';\n    A[symbol] = 7;\n    alphabet.split('').forEach(function (chr) {\n      B[chr] = chr;\n    });\n    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n  }) ? function assign(target, source) {\n    // eslint-disable-line no-unused-vars\n    var T = toObject(target);\n    var argumentsLength = arguments.length;\n    var index = 1;\n    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n    var propertyIsEnumerable = objectPropertyIsEnumerable.f;\n\n    while (argumentsLength > index) {\n      var S = indexedObject(arguments[index++]);\n      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n      var length = keys.length;\n      var j = 0;\n      var key;\n\n      while (length > j) {\n        key = keys[j++];\n        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n      }\n    }\n\n    return T;\n  } : nativeAssign; // `Object.assign` method\n  // https://tc39.github.io/ecma262/#sec-object.assign\n\n  _export({\n    target: 'Object',\n    stat: true,\n    forced: Object.assign !== objectAssign\n  }, {\n    assign: objectAssign\n  });\n\n  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag'); // ES3 wrong here\n\n  var CORRECT_ARGUMENTS = classofRaw(function () {\n    return arguments;\n  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error\n\n  var tryGet = function tryGet(it, key) {\n    try {\n      return it[key];\n    } catch (error) {\n      /* empty */\n    }\n  }; // getting tag from ES6+ `Object.prototype.toString`\n\n\n  var classof = function classof(it) {\n    var O, tag, result;\n    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n  };\n\n  var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');\n  var test = {};\n  test[TO_STRING_TAG$2] = 'z'; // `Object.prototype.toString` method implementation\n  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n\n  var objectToString = String(test) !== '[object z]' ? function toString() {\n    return '[object ' + classof(this) + ']';\n  } : test.toString;\n  var ObjectPrototype$1 = Object.prototype; // `Object.prototype.toString` method\n  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n\n  if (objectToString !== ObjectPrototype$1.toString) {\n    redefine(ObjectPrototype$1, 'toString', objectToString, {\n      unsafe: true\n    });\n  } // a string of all valid unicode whitespaces\n  // eslint-disable-next-line max-len\n\n\n  var whitespaces = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\";\n  var whitespace = '[' + whitespaces + ']';\n  var ltrim = RegExp('^' + whitespace + whitespace + '*');\n  var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\n\n  var createMethod$2 = function createMethod$2(TYPE) {\n    return function ($this) {\n      var string = String(requireObjectCoercible($this));\n      if (TYPE & 1) string = string.replace(ltrim, '');\n      if (TYPE & 2) string = string.replace(rtrim, '');\n      return string;\n    };\n  };\n\n  var stringTrim = {\n    // `String.prototype.{ trimLeft, trimStart }` methods\n    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n    start: createMethod$2(1),\n    // `String.prototype.{ trimRight, trimEnd }` methods\n    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n    end: createMethod$2(2),\n    // `String.prototype.trim` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n    trim: createMethod$2(3)\n  };\n  var trim = stringTrim.trim;\n  var nativeParseInt = global_1.parseInt;\n  var hex = /^[+-]?0[Xx]/;\n  var FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22; // `parseInt` method\n  // https://tc39.github.io/ecma262/#sec-parseint-string-radix\n\n  var _parseInt = FORCED ? function parseInt(string, radix) {\n    var S = trim(String(string));\n    return nativeParseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));\n  } : nativeParseInt; // `parseInt` method\n  // https://tc39.github.io/ecma262/#sec-parseint-string-radix\n\n\n  _export({\n    global: true,\n    forced: parseInt != _parseInt\n  }, {\n    parseInt: _parseInt\n  }); // `String.prototype.{ codePointAt, at }` methods implementation\n\n\n  var createMethod$3 = function createMethod$3(CONVERT_TO_STRING) {\n    return function ($this, pos) {\n      var S = String(requireObjectCoercible($this));\n      var position = toInteger(pos);\n      var size = S.length;\n      var first, second;\n      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n      first = S.charCodeAt(position);\n      return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n    };\n  };\n\n  var stringMultibyte = {\n    // `String.prototype.codePointAt` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n    codeAt: createMethod$3(false),\n    // `String.prototype.at` method\n    // https://github.com/mathiasbynens/String.prototype.at\n    charAt: createMethod$3(true)\n  };\n  var charAt = stringMultibyte.charAt;\n  var STRING_ITERATOR = 'String Iterator';\n  var setInternalState$1 = internalState.set;\n  var getInternalState$1 = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\n\n  defineIterator(String, 'String', function (iterated) {\n    setInternalState$1(this, {\n      type: STRING_ITERATOR,\n      string: String(iterated),\n      index: 0\n    }); // `%StringIteratorPrototype%.next` method\n    // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n  }, function next() {\n    var state = getInternalState$1(this);\n    var string = state.string;\n    var index = state.index;\n    var point;\n    if (index >= string.length) return {\n      value: undefined,\n      done: true\n    };\n    point = charAt(string, index);\n    state.index += point.length;\n    return {\n      value: point,\n      done: false\n    };\n  });\n\n  var redefineAll = function redefineAll(target, src, options) {\n    for (var key in src) {\n      redefine(target, key, src[key], options);\n    }\n\n    return target;\n  };\n\n  var freezing = !fails(function () {\n    return Object.isExtensible(Object.preventExtensions({}));\n  });\n  var internalMetadata = createCommonjsModule(function (module) {\n    var defineProperty = objectDefineProperty.f;\n    var METADATA = uid('meta');\n    var id = 0;\n\n    var isExtensible = Object.isExtensible || function () {\n      return true;\n    };\n\n    var setMetadata = function setMetadata(it) {\n      defineProperty(it, METADATA, {\n        value: {\n          objectID: 'O' + ++id,\n          // object ID\n          weakData: {} // weak collections IDs\n\n        }\n      });\n    };\n\n    var fastKey = function fastKey(it, create) {\n      // return a primitive with prefix\n      if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n\n      if (!has(it, METADATA)) {\n        // can't set metadata to uncaught frozen object\n        if (!isExtensible(it)) return 'F'; // not necessary to add metadata\n\n        if (!create) return 'E'; // add missing metadata\n\n        setMetadata(it); // return object ID\n      }\n\n      return it[METADATA].objectID;\n    };\n\n    var getWeakData = function getWeakData(it, create) {\n      if (!has(it, METADATA)) {\n        // can't set metadata to uncaught frozen object\n        if (!isExtensible(it)) return true; // not necessary to add metadata\n\n        if (!create) return false; // add missing metadata\n\n        setMetadata(it); // return the store of weak collections IDs\n      }\n\n      return it[METADATA].weakData;\n    }; // add metadata on freeze-family methods calling\n\n\n    var onFreeze = function onFreeze(it) {\n      if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);\n      return it;\n    };\n\n    var meta = module.exports = {\n      REQUIRED: false,\n      fastKey: fastKey,\n      getWeakData: getWeakData,\n      onFreeze: onFreeze\n    };\n    hiddenKeys[METADATA] = true;\n  });\n  var internalMetadata_1 = internalMetadata.REQUIRED;\n  var internalMetadata_2 = internalMetadata.fastKey;\n  var internalMetadata_3 = internalMetadata.getWeakData;\n  var internalMetadata_4 = internalMetadata.onFreeze;\n  var ITERATOR$2 = wellKnownSymbol('iterator');\n  var ArrayPrototype$1 = Array.prototype; // check on default Array iterator\n\n  var isArrayIteratorMethod = function isArrayIteratorMethod(it) {\n    return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$2] === it);\n  };\n\n  var ITERATOR$3 = wellKnownSymbol('iterator');\n\n  var getIteratorMethod = function getIteratorMethod(it) {\n    if (it != undefined) return it[ITERATOR$3] || it['@@iterator'] || iterators[classof(it)];\n  }; // call something on iterator step with safe closing on error\n\n\n  var callWithSafeIterationClosing = function callWithSafeIterationClosing(iterator, fn, value, ENTRIES) {\n    try {\n      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)\n    } catch (error) {\n      var returnMethod = iterator['return'];\n      if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n      throw error;\n    }\n  };\n\n  var iterate_1 = createCommonjsModule(function (module) {\n    var Result = function Result(stopped, result) {\n      this.stopped = stopped;\n      this.result = result;\n    };\n\n    var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n      var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);\n      var iterator, iterFn, index, length, result, step;\n\n      if (IS_ITERATOR) {\n        iterator = iterable;\n      } else {\n        iterFn = getIteratorMethod(iterable);\n        if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators\n\n        if (isArrayIteratorMethod(iterFn)) {\n          for (index = 0, length = toLength(iterable.length); length > index; index++) {\n            result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);\n            if (result && result instanceof Result) return result;\n          }\n\n          return new Result(false);\n        }\n\n        iterator = iterFn.call(iterable);\n      }\n\n      while (!(step = iterator.next()).done) {\n        result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n        if (result && result instanceof Result) return result;\n      }\n\n      return new Result(false);\n    };\n\n    iterate.stop = function (result) {\n      return new Result(true, result);\n    };\n  });\n\n  var anInstance = function anInstance(it, Constructor, name) {\n    if (!(it instanceof Constructor)) {\n      throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n    }\n\n    return it;\n  };\n\n  var ITERATOR$4 = wellKnownSymbol('iterator');\n  var SAFE_CLOSING = false;\n\n  try {\n    var called = 0;\n    var iteratorWithReturn = {\n      next: function next() {\n        return {\n          done: !!called++\n        };\n      },\n      'return': function _return() {\n        SAFE_CLOSING = true;\n      }\n    };\n\n    iteratorWithReturn[ITERATOR$4] = function () {\n      return this;\n    }; // eslint-disable-next-line no-throw-literal\n\n\n    Array.from(iteratorWithReturn, function () {\n      throw 2;\n    });\n  } catch (error) {\n    /* empty */\n  }\n\n  var checkCorrectnessOfIteration = function checkCorrectnessOfIteration(exec, SKIP_CLOSING) {\n    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n    var ITERATION_SUPPORT = false;\n\n    try {\n      var object = {};\n\n      object[ITERATOR$4] = function () {\n        return {\n          next: function next() {\n            return {\n              done: ITERATION_SUPPORT = true\n            };\n          }\n        };\n      };\n\n      exec(object);\n    } catch (error) {\n      /* empty */\n    }\n\n    return ITERATION_SUPPORT;\n  }; // makes subclassing work correct for wrapped built-ins\n\n\n  var inheritIfRequired = function inheritIfRequired($this, dummy, Wrapper) {\n    var NewTarget, NewTargetPrototype;\n    if ( // it can work only with native `setPrototypeOf`\n    objectSetPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) objectSetPrototypeOf($this, NewTargetPrototype);\n    return $this;\n  };\n\n  var collection = function collection(CONSTRUCTOR_NAME, wrapper, common, IS_MAP, IS_WEAK) {\n    var NativeConstructor = global_1[CONSTRUCTOR_NAME];\n    var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n    var Constructor = NativeConstructor;\n    var ADDER = IS_MAP ? 'set' : 'add';\n    var exported = {};\n\n    var fixMethod = function fixMethod(KEY) {\n      var nativeMethod = NativePrototype[KEY];\n      redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {\n        nativeMethod.call(this, value === 0 ? 0 : value);\n        return this;\n      } : KEY == 'delete' ? function (key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'get' ? function get(key) {\n        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'has' ? function has(key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : function set(key, value) {\n        nativeMethod.call(this, key === 0 ? 0 : key, value);\n        return this;\n      });\n    }; // eslint-disable-next-line max-len\n\n\n    if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {\n      new NativeConstructor().entries().next();\n    })))) {\n      // create collection constructor\n      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n      internalMetadata.REQUIRED = true;\n    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {\n      var instance = new Constructor(); // early implementations not supports chaining\n\n      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false\n\n      var THROWS_ON_PRIMITIVES = fails(function () {\n        instance.has(1);\n      }); // most early implementations doesn't supports iterables, most modern - not close it correctly\n      // eslint-disable-next-line no-new\n\n      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {\n        new NativeConstructor(iterable);\n      }); // for early implementations -0 and +0 not the same\n\n      var BUGGY_ZERO = !IS_WEAK && fails(function () {\n        // V8 ~ Chromium 42- fails only with 5+ elements\n        var $instance = new NativeConstructor();\n        var index = 5;\n\n        while (index--) {\n          $instance[ADDER](index, index);\n        }\n\n        return !$instance.has(-0);\n      });\n\n      if (!ACCEPT_ITERABLES) {\n        Constructor = wrapper(function (dummy, iterable) {\n          anInstance(dummy, Constructor, CONSTRUCTOR_NAME);\n          var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);\n          if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);\n          return that;\n        });\n        Constructor.prototype = NativePrototype;\n        NativePrototype.constructor = Constructor;\n      }\n\n      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n        fixMethod('delete');\n        fixMethod('has');\n        IS_MAP && fixMethod('get');\n      }\n\n      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method\n\n      if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;\n    }\n\n    exported[CONSTRUCTOR_NAME] = Constructor;\n\n    _export({\n      global: true,\n      forced: Constructor != NativeConstructor\n    }, exported);\n\n    setToStringTag(Constructor, CONSTRUCTOR_NAME);\n    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n    return Constructor;\n  };\n\n  var getWeakData = internalMetadata.getWeakData;\n  var setInternalState$2 = internalState.set;\n  var internalStateGetterFor = internalState.getterFor;\n  var find = arrayIteration.find;\n  var findIndex = arrayIteration.findIndex;\n  var id$1 = 0; // fallback for uncaught frozen keys\n\n  var uncaughtFrozenStore = function uncaughtFrozenStore(store) {\n    return store.frozen || (store.frozen = new UncaughtFrozenStore());\n  };\n\n  var UncaughtFrozenStore = function UncaughtFrozenStore() {\n    this.entries = [];\n  };\n\n  var findUncaughtFrozen = function findUncaughtFrozen(store, key) {\n    return find(store.entries, function (it) {\n      return it[0] === key;\n    });\n  };\n\n  UncaughtFrozenStore.prototype = {\n    get: function get(key) {\n      var entry = findUncaughtFrozen(this, key);\n      if (entry) return entry[1];\n    },\n    has: function has(key) {\n      return !!findUncaughtFrozen(this, key);\n    },\n    set: function set(key, value) {\n      var entry = findUncaughtFrozen(this, key);\n      if (entry) entry[1] = value;else this.entries.push([key, value]);\n    },\n    'delete': function _delete(key) {\n      var index = findIndex(this.entries, function (it) {\n        return it[0] === key;\n      });\n      if (~index) this.entries.splice(index, 1);\n      return !!~index;\n    }\n  };\n  var collectionWeak = {\n    getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n      var C = wrapper(function (that, iterable) {\n        anInstance(that, C, CONSTRUCTOR_NAME);\n        setInternalState$2(that, {\n          type: CONSTRUCTOR_NAME,\n          id: id$1++,\n          frozen: undefined\n        });\n        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);\n      });\n      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n\n      var define = function define(that, key, value) {\n        var state = getInternalState(that);\n        var data = getWeakData(anObject(key), true);\n        if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;\n        return that;\n      };\n\n      redefineAll(C.prototype, {\n        // 23.3.3.2 WeakMap.prototype.delete(key)\n        // 23.4.3.3 WeakSet.prototype.delete(value)\n        'delete': function _delete(key) {\n          var state = getInternalState(this);\n          if (!isObject(key)) return false;\n          var data = getWeakData(key);\n          if (data === true) return uncaughtFrozenStore(state)['delete'](key);\n          return data && has(data, state.id) && delete data[state.id];\n        },\n        // 23.3.3.4 WeakMap.prototype.has(key)\n        // 23.4.3.4 WeakSet.prototype.has(value)\n        has: function has$1(key) {\n          var state = getInternalState(this);\n          if (!isObject(key)) return false;\n          var data = getWeakData(key);\n          if (data === true) return uncaughtFrozenStore(state).has(key);\n          return data && has(data, state.id);\n        }\n      });\n      redefineAll(C.prototype, IS_MAP ? {\n        // 23.3.3.3 WeakMap.prototype.get(key)\n        get: function get(key) {\n          var state = getInternalState(this);\n\n          if (isObject(key)) {\n            var data = getWeakData(key);\n            if (data === true) return uncaughtFrozenStore(state).get(key);\n            return data ? data[state.id] : undefined;\n          }\n        },\n        // 23.3.3.5 WeakMap.prototype.set(key, value)\n        set: function set(key, value) {\n          return define(this, key, value);\n        }\n      } : {\n        // 23.4.3.1 WeakSet.prototype.add(value)\n        add: function add(value) {\n          return define(this, value, true);\n        }\n      });\n      return C;\n    }\n  };\n  var es_weakMap = createCommonjsModule(function (module) {\n    var enforceIternalState = internalState.enforce;\n    var IS_IE11 = !global_1.ActiveXObject && 'ActiveXObject' in global_1;\n    var isExtensible = Object.isExtensible;\n    var InternalWeakMap;\n\n    var wrapper = function wrapper(get) {\n      return function WeakMap() {\n        return get(this, arguments.length ? arguments[0] : undefined);\n      };\n    }; // `WeakMap` constructor\n    // https://tc39.github.io/ecma262/#sec-weakmap-constructor\n\n\n    var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak, true, true); // IE11 WeakMap frozen keys fix\n    // We can't use feature detection because it crash some old IE builds\n    // https://github.com/zloirock/core-js/issues/485\n\n    if (nativeWeakMap && IS_IE11) {\n      InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);\n      internalMetadata.REQUIRED = true;\n      var WeakMapPrototype = $WeakMap.prototype;\n      var nativeDelete = WeakMapPrototype['delete'];\n      var nativeHas = WeakMapPrototype.has;\n      var nativeGet = WeakMapPrototype.get;\n      var nativeSet = WeakMapPrototype.set;\n      redefineAll(WeakMapPrototype, {\n        'delete': function _delete(key) {\n          if (isObject(key) && !isExtensible(key)) {\n            var state = enforceIternalState(this);\n            if (!state.frozen) state.frozen = new InternalWeakMap();\n            return nativeDelete.call(this, key) || state.frozen['delete'](key);\n          }\n\n          return nativeDelete.call(this, key);\n        },\n        has: function has(key) {\n          if (isObject(key) && !isExtensible(key)) {\n            var state = enforceIternalState(this);\n            if (!state.frozen) state.frozen = new InternalWeakMap();\n            return nativeHas.call(this, key) || state.frozen.has(key);\n          }\n\n          return nativeHas.call(this, key);\n        },\n        get: function get(key) {\n          if (isObject(key) && !isExtensible(key)) {\n            var state = enforceIternalState(this);\n            if (!state.frozen) state.frozen = new InternalWeakMap();\n            return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);\n          }\n\n          return nativeGet.call(this, key);\n        },\n        set: function set(key, value) {\n          if (isObject(key) && !isExtensible(key)) {\n            var state = enforceIternalState(this);\n            if (!state.frozen) state.frozen = new InternalWeakMap();\n            nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);\n          } else nativeSet.call(this, key, value);\n\n          return this;\n        }\n      });\n    }\n  });\n  var ITERATOR$5 = wellKnownSymbol('iterator');\n  var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');\n  var ArrayValues = es_array_iterator.values;\n\n  for (var COLLECTION_NAME$1 in domIterables) {\n    var Collection$1 = global_1[COLLECTION_NAME$1];\n    var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;\n\n    if (CollectionPrototype$1) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype$1[ITERATOR$5] !== ArrayValues) try {\n        hide(CollectionPrototype$1, ITERATOR$5, ArrayValues);\n      } catch (error) {\n        CollectionPrototype$1[ITERATOR$5] = ArrayValues;\n      }\n      if (!CollectionPrototype$1[TO_STRING_TAG$3]) hide(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);\n      if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {\n        // some Chrome versions have non-configurable methods on DOMTokenList\n        if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {\n          hide(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);\n        } catch (error) {\n          CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];\n        }\n      }\n    }\n  }\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n\n\n  var FUNC_ERROR_TEXT = 'Expected a function';\n  /** Used as references for various `Number` constants. */\n\n  var NAN = 0 / 0;\n  /** `Object#toString` result references. */\n\n  var symbolTag = '[object Symbol]';\n  /** Used to match leading and trailing whitespace. */\n\n  var reTrim = /^\\s+|\\s+$/g;\n  /** Used to detect bad signed hexadecimal string values. */\n\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  /** Used to detect binary string values. */\n\n  var reIsBinary = /^0b[01]+$/i;\n  /** Used to detect octal string values. */\n\n  var reIsOctal = /^0o[0-7]+$/i;\n  /** Built-in method references without a dependency on `root`. */\n\n  var freeParseInt = parseInt;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Used for built-in method references. */\n\n  var objectProto = Object.prototype;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var objectToString$1 = objectProto.toString;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeMax = Math.max,\n      nativeMin = Math.min;\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n\n  var now = function now() {\n    return root.Date.now();\n  };\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n\n\n  function debounce(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    wait = toNumber(wait) || 0;\n\n    if (isObject$1(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time; // Start the timer for the trailing edge.\n\n      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          result = wait - timeSinceLastCall;\n      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n\n      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    }\n\n    function timerExpired() {\n      var time = now();\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      } // Restart the timer.\n\n\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now());\n    }\n\n    function debounced() {\n      var time = now(),\n          isInvoking = shouldInvoke(time);\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n\n      return result;\n    }\n\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n  /**\n   * Creates a throttled function that only invokes `func` at most once per\n   * every `wait` milliseconds. The throttled function comes with a `cancel`\n   * method to cancel delayed `func` invocations and a `flush` method to\n   * immediately invoke them. Provide `options` to indicate whether `func`\n   * should be invoked on the leading and/or trailing edge of the `wait`\n   * timeout. The `func` is invoked with the last arguments provided to the\n   * throttled function. Subsequent calls to the throttled function return the\n   * result of the last `func` invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the throttled function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.throttle` and `_.debounce`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to throttle.\n   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=true]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * // Avoid excessively updating the position while scrolling.\n   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n   *\n   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n   * jQuery(element).on('click', throttled);\n   *\n   * // Cancel the trailing throttled invocation.\n   * jQuery(window).on('popstate', throttled.cancel);\n   */\n\n\n  function throttle(func, wait, options) {\n    var leading = true,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    if (isObject$1(options)) {\n      leading = 'leading' in options ? !!options.leading : leading;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    return debounce(func, wait, {\n      'leading': leading,\n      'maxWait': wait,\n      'trailing': trailing\n    });\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject$1(value) {\n    var type = _typeof(value);\n\n    return !!value && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return !!value && _typeof(value) == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n\n  function isSymbol(value) {\n    return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString$1.call(value) == symbolTag;\n  }\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n\n\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (isSymbol(value)) {\n      return NAN;\n    }\n\n    if (isObject$1(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$1(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n\n  var lodash_throttle = throttle;\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n\n  var FUNC_ERROR_TEXT$1 = 'Expected a function';\n  /** Used as references for various `Number` constants. */\n\n  var NAN$1 = 0 / 0;\n  /** `Object#toString` result references. */\n\n  var symbolTag$1 = '[object Symbol]';\n  /** Used to match leading and trailing whitespace. */\n\n  var reTrim$1 = /^\\s+|\\s+$/g;\n  /** Used to detect bad signed hexadecimal string values. */\n\n  var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;\n  /** Used to detect binary string values. */\n\n  var reIsBinary$1 = /^0b[01]+$/i;\n  /** Used to detect octal string values. */\n\n  var reIsOctal$1 = /^0o[0-7]+$/i;\n  /** Built-in method references without a dependency on `root`. */\n\n  var freeParseInt$1 = parseInt;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal$1 = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf$1 = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n  /** Used for built-in method references. */\n\n  var objectProto$1 = Object.prototype;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var objectToString$2 = objectProto$1.toString;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeMax$1 = Math.max,\n      nativeMin$1 = Math.min;\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n\n  var now$1 = function now$1() {\n    return root$1.Date.now();\n  };\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n\n\n  function debounce$1(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n\n    wait = toNumber$1(wait) || 0;\n\n    if (isObject$2(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time; // Start the timer for the trailing edge.\n\n      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          result = wait - timeSinceLastCall;\n      return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n\n      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    }\n\n    function timerExpired() {\n      var time = now$1();\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      } // Restart the timer.\n\n\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now$1());\n    }\n\n    function debounced() {\n      var time = now$1(),\n          isInvoking = shouldInvoke(time);\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n\n      return result;\n    }\n\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject$2(value) {\n    var type = _typeof(value);\n\n    return !!value && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike$1(value) {\n    return !!value && _typeof(value) == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n\n  function isSymbol$1(value) {\n    return _typeof(value) == 'symbol' || isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1;\n  }\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n\n\n  function toNumber$1(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (isSymbol$1(value)) {\n      return NAN$1;\n    }\n\n    if (isObject$2(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$2(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = value.replace(reTrim$1, '');\n    var isBinary = reIsBinary$1.test(value);\n    return isBinary || reIsOctal$1.test(value) ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8) : reIsBadHex$1.test(value) ? NAN$1 : +value;\n  }\n\n  var lodash_debounce = debounce$1;\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n\n  var FUNC_ERROR_TEXT$2 = 'Expected a function';\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** `Object#toString` result references. */\n\n  var funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]';\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal$2 = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf$2 = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n\n\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto$2 = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root$2['__core-js_shared__'];\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /** Used to resolve the decompiled source of functions. */\n\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var objectToString$3 = objectProto$2.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty$1).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var splice = arrayProto.splice;\n  /* Built-in method references that are verified to be native. */\n\n  var Map$1 = getNative(root$2, 'Map'),\n      nativeCreate = getNative(Object, 'create');\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    return this.has(key) && delete this.__data__[key];\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty$1.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty$1.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map$1 || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    return getMapData(this, key)['delete'](key);\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    getMapData(this, key).set(key, value);\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject$3(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = _typeof(value);\n\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to process.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n\n\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || resolver && typeof resolver != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$2);\n    }\n\n    var memoized = function memoized() {\n      var args = arguments,\n          key = resolver ? resolver.apply(this, args) : args[0],\n          cache = memoized.cache;\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result);\n      return result;\n    };\n\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  } // Assign cache to `_.memoize`.\n\n\n  memoize.Cache = MapCache;\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject$3(value) ? objectToString$3.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject$3(value) {\n    var type = _typeof(value);\n\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  var lodash_memoize = memoize;\n  /**\r\n   * A collection of shims that provide minimal functionality of the ES6 collections.\r\n   *\r\n   * These implementations are not meant to be used outside of the ResizeObserver\r\n   * modules as they cover only a limited range of use cases.\r\n   */\n\n  /* eslint-disable require-jsdoc, valid-jsdoc */\n\n  var MapShim = function () {\n    if (typeof Map !== 'undefined') {\n      return Map;\n    }\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\n\n\n    function getIndex(arr, key) {\n      var result = -1;\n      arr.some(function (entry, index) {\n        if (entry[0] === key) {\n          result = index;\n          return true;\n        }\n\n        return false;\n      });\n      return result;\n    }\n\n    return (\n      /** @class */\n      function () {\n        function class_1() {\n          this.__entries__ = [];\n        }\n\n        Object.defineProperty(class_1.prototype, \"size\", {\n          /**\r\n           * @returns {boolean}\r\n           */\n          get: function get() {\n            return this.__entries__.length;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\n\n        class_1.prototype.get = function (key) {\n          var index = getIndex(this.__entries__, key);\n          var entry = this.__entries__[index];\n          return entry && entry[1];\n        };\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\n\n\n        class_1.prototype.set = function (key, value) {\n          var index = getIndex(this.__entries__, key);\n\n          if (~index) {\n            this.__entries__[index][1] = value;\n          } else {\n            this.__entries__.push([key, value]);\n          }\n        };\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n\n\n        class_1.prototype[\"delete\"] = function (key) {\n          var entries = this.__entries__;\n          var index = getIndex(entries, key);\n\n          if (~index) {\n            entries.splice(index, 1);\n          }\n        };\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n\n\n        class_1.prototype.has = function (key) {\n          return !!~getIndex(this.__entries__, key);\n        };\n        /**\r\n         * @returns {void}\r\n         */\n\n\n        class_1.prototype.clear = function () {\n          this.__entries__.splice(0);\n        };\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\n\n\n        class_1.prototype.forEach = function (callback, ctx) {\n          if (ctx === void 0) {\n            ctx = null;\n          }\n\n          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            callback.call(ctx, entry[1], entry[0]);\n          }\n        };\n\n        return class_1;\n      }()\n    );\n  }();\n  /**\r\n   * Detects whether window and document objects are available in current environment.\r\n   */\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\n  var global$1 = function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n      return global;\n    }\n\n    if (typeof self !== 'undefined' && self.Math === Math) {\n      return self;\n    }\n\n    if (typeof window !== 'undefined' && window.Math === Math) {\n      return window;\n    } // eslint-disable-next-line no-new-func\n\n\n    return Function('return this')();\n  }();\n  /**\r\n   * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n   * first one is not supported.\r\n   *\r\n   * @returns {number} Requests' identifier.\r\n   */\n\n\n  var requestAnimationFrame$1 = function () {\n    if (typeof requestAnimationFrame === 'function') {\n      // It's required to use a bounded function because IE sometimes throws\n      // an \"Invalid calling object\" error if rAF is invoked without the global\n      // object on the left hand side.\n      return requestAnimationFrame.bind(global$1);\n    }\n\n    return function (callback) {\n      return setTimeout(function () {\n        return callback(Date.now());\n      }, 1000 / 60);\n    };\n  }(); // Defines minimum timeout before adding a trailing call.\n\n\n  var trailingTimeout = 2;\n  /**\r\n   * Creates a wrapper function which ensures that provided callback will be\r\n   * invoked only once during the specified delay period.\r\n   *\r\n   * @param {Function} callback - Function to be invoked after the delay period.\r\n   * @param {number} delay - Delay after which to invoke callback.\r\n   * @returns {Function}\r\n   */\n\n  function throttle$1(callback, delay) {\n    var leadingCall = false,\n        trailingCall = false,\n        lastCallTime = 0;\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\n\n    function resolvePending() {\n      if (leadingCall) {\n        leadingCall = false;\n        callback();\n      }\n\n      if (trailingCall) {\n        proxy();\n      }\n    }\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    function timeoutCallback() {\n      requestAnimationFrame$1(resolvePending);\n    }\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    function proxy() {\n      var timeStamp = Date.now();\n\n      if (leadingCall) {\n        // Reject immediately following calls.\n        if (timeStamp - lastCallTime < trailingTimeout) {\n          return;\n        } // Schedule new call to be in invoked when the pending one is resolved.\n        // This is important for \"transitions\" which never actually start\n        // immediately so there is a chance that we might miss one if change\n        // happens amids the pending invocation.\n\n\n        trailingCall = true;\n      } else {\n        leadingCall = true;\n        trailingCall = false;\n        setTimeout(timeoutCallback, delay);\n      }\n\n      lastCallTime = timeStamp;\n    }\n\n    return proxy;\n  } // Minimum delay before invoking the update of observers.\n\n\n  var REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n  // might affect dimensions of observed elements.\n\n  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\n  var mutationObserverSupported = typeof MutationObserver !== 'undefined';\n  /**\r\n   * Singleton controller class which handles updates of ResizeObserver instances.\r\n   */\n\n  var ResizeObserverController =\n  /** @class */\n  function () {\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\n    function ResizeObserverController() {\n      /**\r\n       * Indicates whether DOM listeners have been added.\r\n       *\r\n       * @private {boolean}\r\n       */\n      this.connected_ = false;\n      /**\r\n       * Tells that controller has subscribed for Mutation Events.\r\n       *\r\n       * @private {boolean}\r\n       */\n\n      this.mutationEventsAdded_ = false;\n      /**\r\n       * Keeps reference to the instance of MutationObserver.\r\n       *\r\n       * @private {MutationObserver}\r\n       */\n\n      this.mutationsObserver_ = null;\n      /**\r\n       * A list of connected observers.\r\n       *\r\n       * @private {Array<ResizeObserverSPI>}\r\n       */\n\n      this.observers_ = [];\n      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n      this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);\n    }\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.addObserver = function (observer) {\n      if (!~this.observers_.indexOf(observer)) {\n        this.observers_.push(observer);\n      } // Add listeners if they haven't been added yet.\n\n\n      if (!this.connected_) {\n        this.connect_();\n      }\n    };\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.removeObserver = function (observer) {\n      var observers = this.observers_;\n      var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n      if (~index) {\n        observers.splice(index, 1);\n      } // Remove listeners if controller has no connected observers.\n\n\n      if (!observers.length && this.connected_) {\n        this.disconnect_();\n      }\n    };\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.refresh = function () {\n      var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n      // be future ones caused by CSS transitions.\n\n      if (changesDetected) {\n        this.refresh();\n      }\n    };\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\n\n\n    ResizeObserverController.prototype.updateObservers_ = function () {\n      // Collect observers that have active observations.\n      var activeObservers = this.observers_.filter(function (observer) {\n        return observer.gatherActive(), observer.hasActive();\n      }); // Deliver notifications in a separate cycle in order to avoid any\n      // collisions between observers, e.g. when multiple instances of\n      // ResizeObserver are tracking the same element and the callback of one\n      // of them changes content dimensions of the observed target. Sometimes\n      // this may result in notifications being blocked for the rest of observers.\n\n      activeObservers.forEach(function (observer) {\n        return observer.broadcastActive();\n      });\n      return activeObservers.length > 0;\n    };\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.connect_ = function () {\n      // Do nothing if running in a non-browser environment or if listeners\n      // have been already added.\n      if (!isBrowser || this.connected_) {\n        return;\n      } // Subscription to the \"Transitionend\" event is used as a workaround for\n      // delayed transitions. This way it's possible to capture at least the\n      // final state of an element.\n\n\n      document.addEventListener('transitionend', this.onTransitionEnd_);\n      window.addEventListener('resize', this.refresh);\n\n      if (mutationObserverSupported) {\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\n        this.mutationsObserver_.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      } else {\n        document.addEventListener('DOMSubtreeModified', this.refresh);\n        this.mutationEventsAdded_ = true;\n      }\n\n      this.connected_ = true;\n    };\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.disconnect_ = function () {\n      // Do nothing if running in a non-browser environment or if listeners\n      // have been already removed.\n      if (!isBrowser || !this.connected_) {\n        return;\n      }\n\n      document.removeEventListener('transitionend', this.onTransitionEnd_);\n      window.removeEventListener('resize', this.refresh);\n\n      if (this.mutationsObserver_) {\n        this.mutationsObserver_.disconnect();\n      }\n\n      if (this.mutationEventsAdded_) {\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\n      }\n\n      this.mutationsObserver_ = null;\n      this.mutationEventsAdded_ = false;\n      this.connected_ = false;\n    };\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n      var _b = _a.propertyName,\n          propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n      var isReflowProperty = transitionKeys.some(function (key) {\n        return !!~propertyName.indexOf(key);\n      });\n\n      if (isReflowProperty) {\n        this.refresh();\n      }\n    };\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\n\n\n    ResizeObserverController.getInstance = function () {\n      if (!this.instance_) {\n        this.instance_ = new ResizeObserverController();\n      }\n\n      return this.instance_;\n    };\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\n\n\n    ResizeObserverController.instance_ = null;\n    return ResizeObserverController;\n  }();\n  /**\r\n   * Defines non-writable/enumerable properties of the provided target object.\r\n   *\r\n   * @param {Object} target - Object for which to define properties.\r\n   * @param {Object} props - Properties to be defined.\r\n   * @returns {Object} Target object.\r\n   */\n\n\n  var defineConfigurable = function defineConfigurable(target, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n      var key = _a[_i];\n      Object.defineProperty(target, key, {\n        value: props[key],\n        enumerable: false,\n        writable: false,\n        configurable: true\n      });\n    }\n\n    return target;\n  };\n  /**\r\n   * Returns the global object associated with provided element.\r\n   *\r\n   * @param {Object} target\r\n   * @returns {Object}\r\n   */\n\n\n  var getWindowOf = function getWindowOf(target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n    // provided element.\n\n    return ownerGlobal || global$1;\n  }; // Placeholder of an empty content rectangle.\n\n\n  var emptyRect = createRectInit(0, 0, 0, 0);\n  /**\r\n   * Converts provided string to a number.\r\n   *\r\n   * @param {number|string} value\r\n   * @returns {number}\r\n   */\n\n  function toFloat(value) {\n    return parseFloat(value) || 0;\n  }\n  /**\r\n   * Extracts borders size from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @param {...string} positions - Borders positions (top, right, ...)\r\n   * @returns {number}\r\n   */\n\n\n  function getBordersSize(styles) {\n    var positions = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      positions[_i - 1] = arguments[_i];\n    }\n\n    return positions.reduce(function (size, position) {\n      var value = styles['border-' + position + '-width'];\n      return size + toFloat(value);\n    }, 0);\n  }\n  /**\r\n   * Extracts paddings sizes from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @returns {Object} Paddings box.\r\n   */\n\n\n  function getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n      var position = positions_1[_i];\n      var value = styles['padding-' + position];\n      paddings[position] = toFloat(value);\n    }\n\n    return paddings;\n  }\n  /**\r\n   * Calculates content rectangle of provided SVG element.\r\n   *\r\n   * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n   *      to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getSVGContentRect(target) {\n    var bbox = target.getBBox();\n    return createRectInit(0, 0, bbox.width, bbox.height);\n  }\n  /**\r\n   * Calculates content rectangle of provided HTMLElement.\r\n   *\r\n   * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth,\n        clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n\n    if (!clientWidth && !clientHeight) {\n      return emptyRect;\n    }\n\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n    var width = toFloat(styles.width),\n        height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n\n    if (styles.boxSizing === 'border-box') {\n      // Following conditions are required to handle Internet Explorer which\n      // doesn't include paddings and borders to computed CSS dimensions.\n      //\n      // We can say that if CSS dimensions + paddings are equal to the \"client\"\n      // properties then it's either IE, and thus we don't need to subtract\n      // anything, or an element merely doesn't have paddings/borders styles.\n      if (Math.round(width + horizPad) !== clientWidth) {\n        width -= getBordersSize(styles, 'left', 'right') + horizPad;\n      }\n\n      if (Math.round(height + vertPad) !== clientHeight) {\n        height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n      }\n    } // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n\n\n    if (!isDocumentElement(target)) {\n      // In some browsers (only in Firefox, actually) CSS width & height\n      // include scroll bars size which can be removed at this step as scroll\n      // bars are the only difference between rounded dimensions + paddings\n      // and \"client\" properties, though that is not always true in Chrome.\n      var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n      var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n      // E.g. for an element with content width of 314.2px it sometimes gives\n      // the client width of 315px and for the width of 314.7px it may give\n      // 314px. And it doesn't happen all the time. So just ignore this delta\n      // as a non-relevant.\n\n      if (Math.abs(vertScrollbar) !== 1) {\n        width -= vertScrollbar;\n      }\n\n      if (Math.abs(horizScrollbar) !== 1) {\n        height -= horizScrollbar;\n      }\n    }\n\n    return createRectInit(paddings.left, paddings.top, width, height);\n  }\n  /**\r\n   * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\n\n\n  var isSVGGraphicsElement = function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n      return function (target) {\n        return target instanceof getWindowOf(target).SVGGraphicsElement;\n      };\n    } // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n\n\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n    };\n  }();\n  /**\r\n   * Checks whether provided element is a document element (<html>).\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\n\n\n  function isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n  }\n  /**\r\n   * Calculates an appropriate content rectangle for provided html or svg element.\r\n   *\r\n   * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getContentRect(target) {\n    if (!isBrowser) {\n      return emptyRect;\n    }\n\n    if (isSVGGraphicsElement(target)) {\n      return getSVGContentRect(target);\n    }\n\n    return getHTMLElementContentRect(target);\n  }\n  /**\r\n   * Creates rectangle with an interface of the DOMRectReadOnly.\r\n   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n   *\r\n   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n   * @returns {DOMRectReadOnly}\r\n   */\n\n\n  function createReadOnlyRect(_a) {\n    var x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n    defineConfigurable(rect, {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      top: y,\n      right: x + width,\n      bottom: height + y,\n      left: x\n    });\n    return rect;\n  }\n  /**\r\n   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n   *\r\n   * @param {number} x - X coordinate.\r\n   * @param {number} y - Y coordinate.\r\n   * @param {number} width - Rectangle's width.\r\n   * @param {number} height - Rectangle's height.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function createRectInit(x, y, width, height) {\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }\n  /**\r\n   * Class that is responsible for computations of the content rectangle of\r\n   * provided DOM element and for keeping track of it's changes.\r\n   */\n\n\n  var ResizeObservation =\n  /** @class */\n  function () {\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\n    function ResizeObservation(target) {\n      /**\r\n       * Broadcasted width of content rectangle.\r\n       *\r\n       * @type {number}\r\n       */\n      this.broadcastWidth = 0;\n      /**\r\n       * Broadcasted height of content rectangle.\r\n       *\r\n       * @type {number}\r\n       */\n\n      this.broadcastHeight = 0;\n      /**\r\n       * Reference to the last observed content rectangle.\r\n       *\r\n       * @private {DOMRectInit}\r\n       */\n\n      this.contentRect_ = createRectInit(0, 0, 0, 0);\n      this.target = target;\n    }\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n\n    ResizeObservation.prototype.isActive = function () {\n      var rect = getContentRect(this.target);\n      this.contentRect_ = rect;\n      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n    };\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\n\n\n    ResizeObservation.prototype.broadcastRect = function () {\n      var rect = this.contentRect_;\n      this.broadcastWidth = rect.width;\n      this.broadcastHeight = rect.height;\n      return rect;\n    };\n\n    return ResizeObservation;\n  }();\n\n  var ResizeObserverEntry =\n  /** @class */\n  function () {\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\n    function ResizeObserverEntry(target, rectInit) {\n      var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n      // and are also not enumerable in the native implementation.\n      //\n      // Property accessors are not being used as they'd require to define a\n      // private WeakMap storage which may cause memory leaks in browsers that\n      // don't support this type of collections.\n\n      defineConfigurable(this, {\n        target: target,\n        contentRect: contentRect\n      });\n    }\n\n    return ResizeObserverEntry;\n  }();\n\n  var ResizeObserverSPI =\n  /** @class */\n  function () {\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\n      /**\r\n       * Collection of resize observations that have detected changes in dimensions\r\n       * of elements.\r\n       *\r\n       * @private {Array<ResizeObservation>}\r\n       */\n      this.activeObservations_ = [];\n      /**\r\n       * Registry of the ResizeObservation instances.\r\n       *\r\n       * @private {Map<Element, ResizeObservation>}\r\n       */\n\n      this.observations_ = new MapShim();\n\n      if (typeof callback !== 'function') {\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\n      }\n\n      this.callback_ = callback;\n      this.controller_ = controller;\n      this.callbackCtx_ = callbackCtx;\n    }\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.observe = function (target) {\n      if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n      } // Do nothing if current environment doesn't have the Element interface.\n\n\n      if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n      }\n\n      if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n      }\n\n      var observations = this.observations_; // Do nothing if element is already being observed.\n\n      if (observations.has(target)) {\n        return;\n      }\n\n      observations.set(target, new ResizeObservation(target));\n      this.controller_.addObserver(this); // Force the update of observations.\n\n      this.controller_.refresh();\n    };\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.unobserve = function (target) {\n      if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n      } // Do nothing if current environment doesn't have the Element interface.\n\n\n      if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n      }\n\n      if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n      }\n\n      var observations = this.observations_; // Do nothing if element is not being observed.\n\n      if (!observations.has(target)) {\n        return;\n      }\n\n      observations[\"delete\"](target);\n\n      if (!observations.size) {\n        this.controller_.removeObserver(this);\n      }\n    };\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.disconnect = function () {\n      this.clearActive();\n      this.observations_.clear();\n      this.controller_.removeObserver(this);\n    };\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.gatherActive = function () {\n      var _this = this;\n\n      this.clearActive();\n      this.observations_.forEach(function (observation) {\n        if (observation.isActive()) {\n          _this.activeObservations_.push(observation);\n        }\n      });\n    };\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.broadcastActive = function () {\n      // Do nothing if observer doesn't have active observations.\n      if (!this.hasActive()) {\n        return;\n      }\n\n      var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n      var entries = this.activeObservations_.map(function (observation) {\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n      });\n      this.callback_.call(ctx, entries, ctx);\n      this.clearActive();\n    };\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    ResizeObserverSPI.prototype.clearActive = function () {\n      this.activeObservations_.splice(0);\n    };\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n\n    ResizeObserverSPI.prototype.hasActive = function () {\n      return this.activeObservations_.length > 0;\n    };\n\n    return ResizeObserverSPI;\n  }(); // Registry of internal observers. If WeakMap is not available use current shim\n  // for the Map collection as it has all required methods and because WeakMap\n  // can't be fully polyfilled anyway.\n\n\n  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n  /**\r\n   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n   * exposing only those methods and properties that are defined in the spec.\r\n   */\n\n  var ResizeObserver =\n  /** @class */\n  function () {\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\n    function ResizeObserver(callback) {\n      if (!(this instanceof ResizeObserver)) {\n        throw new TypeError('Cannot call a class as a function.');\n      }\n\n      if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n      }\n\n      var controller = ResizeObserverController.getInstance();\n      var observer = new ResizeObserverSPI(callback, controller, this);\n      observers.set(this, observer);\n    }\n\n    return ResizeObserver;\n  }(); // Expose public methods of ResizeObserver.\n\n\n  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n      var _a;\n\n      return (_a = observers.get(this))[method].apply(_a, arguments);\n    };\n  });\n\n  var index = function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n      return global$1.ResizeObserver;\n    }\n\n    return ResizeObserver;\n  }();\n\n  var cachedScrollbarWidth = null;\n  var cachedDevicePixelRatio = null;\n\n  if (canUseDom) {\n    window.addEventListener('resize', function () {\n      if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n        cachedDevicePixelRatio = window.devicePixelRatio;\n        cachedScrollbarWidth = null;\n      }\n    });\n  }\n\n  function scrollbarWidth() {\n    if (cachedScrollbarWidth === null) {\n      if (typeof document === 'undefined') {\n        cachedScrollbarWidth = 0;\n        return cachedScrollbarWidth;\n      }\n\n      var body = document.body;\n      var box = document.createElement('div');\n      box.classList.add('simplebar-hide-scrollbar');\n      body.appendChild(box);\n      var width = box.getBoundingClientRect().right;\n      body.removeChild(box);\n      cachedScrollbarWidth = width;\n    }\n\n    return cachedScrollbarWidth;\n  } // `Array.prototype.{ reduce, reduceRight }` methods implementation\n\n\n  var createMethod$4 = function createMethod$4(IS_RIGHT) {\n    return function (that, callbackfn, argumentsLength, memo) {\n      aFunction$1(callbackfn);\n      var O = toObject(that);\n      var self = indexedObject(O);\n      var length = toLength(O.length);\n      var index = IS_RIGHT ? length - 1 : 0;\n      var i = IS_RIGHT ? -1 : 1;\n      if (argumentsLength < 2) while (true) {\n        if (index in self) {\n          memo = self[index];\n          index += i;\n          break;\n        }\n\n        index += i;\n\n        if (IS_RIGHT ? index < 0 : length <= index) {\n          throw TypeError('Reduce of empty array with no initial value');\n        }\n      }\n\n      for (; IS_RIGHT ? index >= 0 : length > index; index += i) {\n        if (index in self) {\n          memo = callbackfn(memo, self[index], index, O);\n        }\n      }\n\n      return memo;\n    };\n  };\n\n  var arrayReduce = {\n    // `Array.prototype.reduce` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n    left: createMethod$4(false),\n    // `Array.prototype.reduceRight` method\n    // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n    right: createMethod$4(true)\n  };\n  var $reduce = arrayReduce.left; // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n\n  _export({\n    target: 'Array',\n    proto: true,\n    forced: sloppyArrayMethod('reduce')\n  }, {\n    reduce: function reduce(callbackfn\n    /* , initialValue */\n    ) {\n      return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  var defineProperty$1 = objectDefineProperty.f;\n  var FunctionPrototype = Function.prototype;\n  var FunctionPrototypeToString = FunctionPrototype.toString;\n  var nameRE = /^\\s*function ([^ (]*)/;\n  var NAME = 'name'; // Function instances `.name` property\n  // https://tc39.github.io/ecma262/#sec-function-instances-name\n\n  if (descriptors && !(NAME in FunctionPrototype)) {\n    defineProperty$1(FunctionPrototype, NAME, {\n      configurable: true,\n      get: function get() {\n        try {\n          return FunctionPrototypeToString.call(this).match(nameRE)[1];\n        } catch (error) {\n          return '';\n        }\n      }\n    });\n  } // `RegExp.prototype.flags` getter implementation\n  // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\n\n\n  var regexpFlags = function regexpFlags() {\n    var that = anObject(this);\n    var result = '';\n    if (that.global) result += 'g';\n    if (that.ignoreCase) result += 'i';\n    if (that.multiline) result += 'm';\n    if (that.dotAll) result += 's';\n    if (that.unicode) result += 'u';\n    if (that.sticky) result += 'y';\n    return result;\n  };\n\n  var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the\n  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n  // which loads this file before patching the method.\n\n  var nativeReplace = String.prototype.replace;\n  var patchedExec = nativeExec;\n\n  var UPDATES_LAST_INDEX_WRONG = function () {\n    var re1 = /a/;\n    var re2 = /b*/g;\n    nativeExec.call(re1, 'a');\n    nativeExec.call(re2, 'a');\n    return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n  }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.\n\n\n  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\n  if (PATCH) {\n    patchedExec = function exec(str) {\n      var re = this;\n      var lastIndex, reCopy, match, i;\n\n      if (NPCG_INCLUDED) {\n        reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n      }\n\n      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n      match = nativeExec.call(re, str);\n\n      if (UPDATES_LAST_INDEX_WRONG && match) {\n        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n      }\n\n      if (NPCG_INCLUDED && match && match.length > 1) {\n        // Fix browsers whose `exec` methods don't consistently return `undefined`\n        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n        nativeReplace.call(match[0], reCopy, function () {\n          for (i = 1; i < arguments.length - 2; i++) {\n            if (arguments[i] === undefined) match[i] = undefined;\n          }\n        });\n      }\n\n      return match;\n    };\n  }\n\n  var regexpExec = patchedExec;\n\n  _export({\n    target: 'RegExp',\n    proto: true,\n    forced: /./.exec !== regexpExec\n  }, {\n    exec: regexpExec\n  });\n\n  var SPECIES$2 = wellKnownSymbol('species');\n  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n    // #replace needs built-in support for named groups.\n    // #match works fine because it just return the exec results, even if it has\n    // a \"grops\" property.\n    var re = /./;\n\n    re.exec = function () {\n      var result = [];\n      result.groups = {\n        a: '7'\n      };\n      return result;\n    };\n\n    return ''.replace(re, '$<a>') !== '7';\n  }); // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  // Weex JS has frozen built-in prototypes, so use try / catch wrapper\n\n  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n    var re = /(?:)/;\n    var originalExec = re.exec;\n\n    re.exec = function () {\n      return originalExec.apply(this, arguments);\n    };\n\n    var result = 'ab'.split(re);\n    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n  });\n\n  var fixRegexpWellKnownSymbolLogic = function fixRegexpWellKnownSymbolLogic(KEY, length, exec, sham) {\n    var SYMBOL = wellKnownSymbol(KEY);\n    var DELEGATES_TO_SYMBOL = !fails(function () {\n      // String methods call symbol-named RegEp methods\n      var O = {};\n\n      O[SYMBOL] = function () {\n        return 7;\n      };\n\n      return ''[KEY](O) != 7;\n    });\n    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n      // Symbol-named RegExp methods call .exec\n      var execCalled = false;\n      var re = /a/;\n\n      re.exec = function () {\n        execCalled = true;\n        return null;\n      };\n\n      if (KEY === 'split') {\n        // RegExp[@@split] doesn't call the regex's exec method, but first creates\n        // a new one. We need to return the patched regex when creating the new one.\n        re.constructor = {};\n\n        re.constructor[SPECIES$2] = function () {\n          return re;\n        };\n      }\n\n      re[SYMBOL]('');\n      return !execCalled;\n    });\n\n    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n      var nativeRegExpMethod = /./[SYMBOL];\n      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return {\n              done: true,\n              value: nativeRegExpMethod.call(regexp, str, arg2)\n            };\n          }\n\n          return {\n            done: true,\n            value: nativeMethod.call(str, regexp, arg2)\n          };\n        }\n\n        return {\n          done: false\n        };\n      });\n      var stringMethod = methods[0];\n      var regexMethod = methods[1];\n      redefine(String.prototype, KEY, stringMethod);\n      redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) {\n        return regexMethod.call(string, this, arg);\n      } // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) {\n        return regexMethod.call(string, this);\n      });\n      if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);\n    }\n  };\n\n  var charAt$1 = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation\n  // https://tc39.github.io/ecma262/#sec-advancestringindex\n\n  var advanceStringIndex = function advanceStringIndex(S, index, unicode) {\n    return index + (unicode ? charAt$1(S, index).length : 1);\n  }; // `RegExpExec` abstract operation\n  // https://tc39.github.io/ecma262/#sec-regexpexec\n\n\n  var regexpExecAbstract = function regexpExecAbstract(R, S) {\n    var exec = R.exec;\n\n    if (typeof exec === 'function') {\n      var result = exec.call(R, S);\n\n      if (_typeof(result) !== 'object') {\n        throw TypeError('RegExp exec method returned something other than an Object or null');\n      }\n\n      return result;\n    }\n\n    if (classofRaw(R) !== 'RegExp') {\n      throw TypeError('RegExp#exec called on incompatible receiver');\n    }\n\n    return regexpExec.call(R, S);\n  }; // @@match logic\n\n\n  fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n    return [// `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    }, // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regexpExecAbstract(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n\n      while ((result = regexpExecAbstract(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n\n      return n === 0 ? null : A;\n    }];\n  });\n  var max$1 = Math.max;\n  var min$2 = Math.min;\n  var floor$1 = Math.floor;\n  var SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\n  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\n  var maybeToString = function maybeToString(it) {\n    return it === undefined ? it : String(it);\n  }; // @@replace logic\n\n\n  fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {\n    return [// `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);\n    }, // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n\n      var results = [];\n\n      while (true) {\n        var result = regexpExecAbstract(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max$1(min$2(toInteger(result.index), S.length), 0);\n        var captures = []; // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n\n        for (var j = 1; j < result.length; j++) {\n          captures.push(maybeToString(result[j]));\n        }\n\n        var namedCaptures = result.groups;\n\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }]; // https://tc39.github.io/ecma262/#sec-getsubstitution\n\n    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n      var tailPos = position + matched.length;\n      var m = captures.length;\n      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n\n      if (namedCaptures !== undefined) {\n        namedCaptures = toObject(namedCaptures);\n        symbols = SUBSTITUTION_SYMBOLS;\n      }\n\n      return nativeReplace.call(replacement, symbols, function (match, ch) {\n        var capture;\n\n        switch (ch.charAt(0)) {\n          case '$':\n            return '$';\n\n          case '&':\n            return matched;\n\n          case '`':\n            return str.slice(0, position);\n\n          case \"'\":\n            return str.slice(tailPos);\n\n          case '<':\n            capture = namedCaptures[ch.slice(1, -1)];\n            break;\n\n          default:\n            // \\d\\d?\n            var n = +ch;\n            if (n === 0) return match;\n\n            if (n > m) {\n              var f = floor$1(n / 10);\n              if (f === 0) return match;\n              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n              return match;\n            }\n\n            capture = captures[n - 1];\n        }\n\n        return capture === undefined ? '' : capture;\n      });\n    }\n  }); // Helper function to retrieve options from element attributes\n\n  var getOptions = function getOptions(obj) {\n    var options = Array.prototype.reduce.call(obj, function (acc, attribute) {\n      var option = attribute.name.match(/data-simplebar-(.+)/);\n\n      if (option) {\n        var key = option[1].replace(/\\W+(.)/g, function (x, chr) {\n          return chr.toUpperCase();\n        });\n\n        switch (attribute.value) {\n          case 'true':\n            acc[key] = true;\n            break;\n\n          case 'false':\n            acc[key] = false;\n            break;\n\n          case undefined:\n            acc[key] = true;\n            break;\n\n          default:\n            acc[key] = attribute.value;\n        }\n      }\n\n      return acc;\n    }, {});\n    return options;\n  };\n\n  function getElementWindow(element) {\n    if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {\n      return window;\n    }\n\n    return element.ownerDocument.defaultView;\n  }\n\n  function getElementDocument(element) {\n    if (!element || !element.ownerDocument) {\n      return document;\n    }\n\n    return element.ownerDocument;\n  }\n\n  var SimpleBar = /*#__PURE__*/function () {\n    function SimpleBar(element, options) {\n      var _this = this;\n\n      this.onScroll = function () {\n        var elWindow = getElementWindow(_this.el);\n\n        if (!_this.scrollXTicking) {\n          elWindow.requestAnimationFrame(_this.scrollX);\n          _this.scrollXTicking = true;\n        }\n\n        if (!_this.scrollYTicking) {\n          elWindow.requestAnimationFrame(_this.scrollY);\n          _this.scrollYTicking = true;\n        }\n      };\n\n      this.scrollX = function () {\n        if (_this.axis.x.isOverflowing) {\n          _this.showScrollbar('x');\n\n          _this.positionScrollbar('x');\n        }\n\n        _this.scrollXTicking = false;\n      };\n\n      this.scrollY = function () {\n        if (_this.axis.y.isOverflowing) {\n          _this.showScrollbar('y');\n\n          _this.positionScrollbar('y');\n        }\n\n        _this.scrollYTicking = false;\n      };\n\n      this.onMouseEnter = function () {\n        _this.showScrollbar('x');\n\n        _this.showScrollbar('y');\n      };\n\n      this.onMouseMove = function (e) {\n        _this.mouseX = e.clientX;\n        _this.mouseY = e.clientY;\n\n        if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n          _this.onMouseMoveForAxis('x');\n        }\n\n        if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n          _this.onMouseMoveForAxis('y');\n        }\n      };\n\n      this.onMouseLeave = function () {\n        _this.onMouseMove.cancel();\n\n        if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n          _this.onMouseLeaveForAxis('x');\n        }\n\n        if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n          _this.onMouseLeaveForAxis('y');\n        }\n\n        _this.mouseX = -1;\n        _this.mouseY = -1;\n      };\n\n      this.onWindowResize = function () {\n        // Recalculate scrollbarWidth in case it's a zoom\n        _this.scrollbarWidth = _this.getScrollbarWidth();\n\n        _this.hideNativeScrollbar();\n      };\n\n      this.hideScrollbars = function () {\n        _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n        _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n        if (!_this.isWithinBounds(_this.axis.y.track.rect)) {\n          _this.axis.y.scrollbar.el.classList.remove(_this.classNames.visible);\n\n          _this.axis.y.isVisible = false;\n        }\n\n        if (!_this.isWithinBounds(_this.axis.x.track.rect)) {\n          _this.axis.x.scrollbar.el.classList.remove(_this.classNames.visible);\n\n          _this.axis.x.isVisible = false;\n        }\n      };\n\n      this.onPointerEvent = function (e) {\n        var isWithinTrackXBounds, isWithinTrackYBounds;\n        _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n        _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n        if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n          isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\n        }\n\n        if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n          isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\n        } // If any pointer event is called on the scrollbar\n\n\n        if (isWithinTrackXBounds || isWithinTrackYBounds) {\n          // Preventing the event's default action stops text being\n          // selectable during the drag.\n          e.preventDefault(); // Prevent event leaking\n\n          e.stopPropagation();\n\n          if (e.type === 'mousedown') {\n            if (isWithinTrackXBounds) {\n              _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();\n\n              if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\n                _this.onDragStart(e, 'x');\n              } else {\n                _this.onTrackClick(e, 'x');\n              }\n            }\n\n            if (isWithinTrackYBounds) {\n              _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();\n\n              if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\n                _this.onDragStart(e, 'y');\n              } else {\n                _this.onTrackClick(e, 'y');\n              }\n            }\n          }\n        }\n      };\n\n      this.drag = function (e) {\n        var eventOffset;\n        var track = _this.axis[_this.draggedAxis].track;\n        var trackSize = track.rect[_this.axis[_this.draggedAxis].sizeAttr];\n        var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n        var contentSize = _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollSizeAttr];\n        var hostSize = parseInt(_this.elStyles[_this.axis[_this.draggedAxis].sizeAttr], 10);\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (_this.draggedAxis === 'y') {\n          eventOffset = e.pageY;\n        } else {\n          eventOffset = e.pageX;\n        } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n\n\n        var dragPos = eventOffset - track.rect[_this.axis[_this.draggedAxis].offsetAttr] - _this.axis[_this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.\n\n        var dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.\n\n        var scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL\n\n        if (_this.draggedAxis === 'x') {\n          scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? scrollPos - (trackSize + scrollbar.size) : scrollPos;\n          scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollPos : scrollPos;\n        }\n\n        _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;\n      };\n\n      this.onEndDrag = function (e) {\n        var elDocument = getElementDocument(_this.el);\n        var elWindow = getElementWindow(_this.el);\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.el.classList.remove(_this.classNames.dragging);\n\n        elDocument.removeEventListener('mousemove', _this.drag, true);\n        elDocument.removeEventListener('mouseup', _this.onEndDrag, true);\n        _this.removePreventClickId = elWindow.setTimeout(function () {\n          // Remove these asynchronously so we still suppress click events\n          // generated simultaneously with mouseup.\n          elDocument.removeEventListener('click', _this.preventClick, true);\n          elDocument.removeEventListener('dblclick', _this.preventClick, true);\n          _this.removePreventClickId = null;\n        });\n      };\n\n      this.preventClick = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      };\n\n      this.el = element;\n      this.minScrollbarWidth = 20;\n      this.options = Object.assign({}, SimpleBar.defaultOptions, {}, options);\n      this.classNames = Object.assign({}, SimpleBar.defaultOptions.classNames, {}, this.options.classNames);\n      this.axis = {\n        x: {\n          scrollOffsetAttr: 'scrollLeft',\n          sizeAttr: 'width',\n          scrollSizeAttr: 'scrollWidth',\n          offsetSizeAttr: 'offsetWidth',\n          offsetAttr: 'left',\n          overflowAttr: 'overflowX',\n          dragOffset: 0,\n          isOverflowing: true,\n          isVisible: false,\n          forceVisible: false,\n          track: {},\n          scrollbar: {}\n        },\n        y: {\n          scrollOffsetAttr: 'scrollTop',\n          sizeAttr: 'height',\n          scrollSizeAttr: 'scrollHeight',\n          offsetSizeAttr: 'offsetHeight',\n          offsetAttr: 'top',\n          overflowAttr: 'overflowY',\n          dragOffset: 0,\n          isOverflowing: true,\n          isVisible: false,\n          forceVisible: false,\n          track: {},\n          scrollbar: {}\n        }\n      };\n      this.removePreventClickId = null; // Don't re-instantiate over an existing one\n\n      if (SimpleBar.instances.has(this.el)) {\n        return;\n      }\n\n      this.recalculate = lodash_throttle(this.recalculate.bind(this), 64);\n      this.onMouseMove = lodash_throttle(this.onMouseMove.bind(this), 64);\n      this.hideScrollbars = lodash_debounce(this.hideScrollbars.bind(this), this.options.timeout);\n      this.onWindowResize = lodash_debounce(this.onWindowResize.bind(this), 64, {\n        leading: true\n      });\n      SimpleBar.getRtlHelpers = lodash_memoize(SimpleBar.getRtlHelpers);\n      this.init();\n    }\n    /**\n     * Static properties\n     */\n\n    /**\n     * Helper to fix browsers inconsistency on RTL:\n     *  - Firefox inverts the scrollbar initial position\n     *  - IE11 inverts both scrollbar position and scrolling offset\n     * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n     */\n\n\n    SimpleBar.getRtlHelpers = function getRtlHelpers() {\n      var dummyDiv = document.createElement('div');\n      dummyDiv.innerHTML = '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n      var scrollbarDummyEl = dummyDiv.firstElementChild;\n      document.body.appendChild(scrollbarDummyEl);\n      var dummyContainerChild = scrollbarDummyEl.firstElementChild;\n      scrollbarDummyEl.scrollLeft = 0;\n      var dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n      var dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n      scrollbarDummyEl.scrollLeft = 999;\n      var dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(dummyContainerChild);\n      return {\n        // determines if the scrolling is responding with negative values\n        isRtlScrollingInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left && dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left !== 0,\n        // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n        isRtlScrollbarInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left\n      };\n    };\n\n    SimpleBar.getOffset = function getOffset(el) {\n      var rect = el.getBoundingClientRect();\n      var elDocument = getElementDocument(el);\n      var elWindow = getElementWindow(el);\n      return {\n        top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n        left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n      };\n    };\n\n    var _proto = SimpleBar.prototype;\n\n    _proto.init = function init() {\n      // Save a reference to the instance, so we know this DOM node has already been instancied\n      SimpleBar.instances.set(this.el, this); // We stop here on server-side\n\n      if (canUseDom) {\n        this.initDOM();\n        this.scrollbarWidth = this.getScrollbarWidth();\n        this.recalculate();\n        this.initListeners();\n      }\n    };\n\n    _proto.initDOM = function initDOM() {\n      var _this2 = this;\n\n      var elDocument = getElementDocument(this.el); // make sure this element doesn't have the elements yet\n\n      if (Array.prototype.filter.call(this.el.children, function (child) {\n        return child.classList.contains(_this2.classNames.wrapper);\n      }).length) {\n        // assume that element has his DOM already initiated\n        this.wrapperEl = this.el.querySelector(\".\" + this.classNames.wrapper);\n        this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(\".\" + this.classNames.contentWrapper);\n        this.contentEl = this.options.contentNode || this.el.querySelector(\".\" + this.classNames.contentEl);\n        this.offsetEl = this.el.querySelector(\".\" + this.classNames.offset);\n        this.maskEl = this.el.querySelector(\".\" + this.classNames.mask);\n        this.placeholderEl = this.findChild(this.wrapperEl, \".\" + this.classNames.placeholder);\n        this.heightAutoObserverWrapperEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverWrapperEl);\n        this.heightAutoObserverEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverEl);\n        this.axis.x.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.horizontal);\n        this.axis.y.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.vertical);\n      } else {\n        // Prepare DOM\n        this.wrapperEl = document.createElement('div');\n        this.contentWrapperEl = document.createElement('div');\n        this.offsetEl = document.createElement('div');\n        this.maskEl = document.createElement('div');\n        this.contentEl = document.createElement('div');\n        this.placeholderEl = document.createElement('div');\n        this.heightAutoObserverWrapperEl = document.createElement('div');\n        this.heightAutoObserverEl = document.createElement('div');\n        this.wrapperEl.classList.add(this.classNames.wrapper);\n        this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n        this.offsetEl.classList.add(this.classNames.offset);\n        this.maskEl.classList.add(this.classNames.mask);\n        this.contentEl.classList.add(this.classNames.contentEl);\n        this.placeholderEl.classList.add(this.classNames.placeholder);\n        this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);\n        this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);\n\n        while (this.el.firstChild) {\n          this.contentEl.appendChild(this.el.firstChild);\n        }\n\n        this.contentWrapperEl.appendChild(this.contentEl);\n        this.offsetEl.appendChild(this.contentWrapperEl);\n        this.maskEl.appendChild(this.offsetEl);\n        this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n        this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n        this.wrapperEl.appendChild(this.maskEl);\n        this.wrapperEl.appendChild(this.placeholderEl);\n        this.el.appendChild(this.wrapperEl);\n      }\n\n      if (!this.axis.x.track.el || !this.axis.y.track.el) {\n        var track = document.createElement('div');\n        var scrollbar = document.createElement('div');\n        track.classList.add(this.classNames.track);\n        scrollbar.classList.add(this.classNames.scrollbar);\n        track.appendChild(scrollbar);\n        this.axis.x.track.el = track.cloneNode(true);\n        this.axis.x.track.el.classList.add(this.classNames.horizontal);\n        this.axis.y.track.el = track.cloneNode(true);\n        this.axis.y.track.el.classList.add(this.classNames.vertical);\n        this.el.appendChild(this.axis.x.track.el);\n        this.el.appendChild(this.axis.y.track.el);\n      }\n\n      this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\".\" + this.classNames.scrollbar);\n      this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\".\" + this.classNames.scrollbar);\n\n      if (!this.options.autoHide) {\n        this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n        this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n      }\n\n      this.el.setAttribute('data-simplebar', 'init');\n    };\n\n    _proto.initListeners = function initListeners() {\n      var _this3 = this;\n\n      var elWindow = getElementWindow(this.el); // Event listeners\n\n      if (this.options.autoHide) {\n        this.el.addEventListener('mouseenter', this.onMouseEnter);\n      }\n\n      ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n        _this3.el.addEventListener(e, _this3.onPointerEvent, true);\n      });\n      ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n        _this3.el.addEventListener(e, _this3.onPointerEvent, {\n          capture: true,\n          passive: true\n        });\n      });\n      this.el.addEventListener('mousemove', this.onMouseMove);\n      this.el.addEventListener('mouseleave', this.onMouseLeave);\n      this.contentWrapperEl.addEventListener('scroll', this.onScroll); // Browser zoom triggers a window resize\n\n      elWindow.addEventListener('resize', this.onWindowResize); // Hack for https://github.com/WICG/ResizeObserver/issues/38\n\n      var resizeObserverStarted = false;\n      var resizeObserver = elWindow.ResizeObserver || index;\n      this.resizeObserver = new resizeObserver(function () {\n        if (!resizeObserverStarted) return;\n\n        _this3.recalculate();\n      });\n      this.resizeObserver.observe(this.el);\n      this.resizeObserver.observe(this.contentEl);\n      elWindow.requestAnimationFrame(function () {\n        resizeObserverStarted = true;\n      }); // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n\n      this.mutationObserver = new elWindow.MutationObserver(this.recalculate);\n      this.mutationObserver.observe(this.contentEl, {\n        childList: true,\n        subtree: true,\n        characterData: true\n      });\n    };\n\n    _proto.recalculate = function recalculate() {\n      var elWindow = getElementWindow(this.el);\n      this.elStyles = elWindow.getComputedStyle(this.el);\n      this.isRtl = this.elStyles.direction === 'rtl';\n      var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n      var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n      var contentElOffsetWidth = this.contentEl.offsetWidth;\n      var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n      var elOverflowX = this.elStyles.overflowX;\n      var elOverflowY = this.elStyles.overflowY;\n      this.contentEl.style.padding = this.elStyles.paddingTop + \" \" + this.elStyles.paddingRight + \" \" + this.elStyles.paddingBottom + \" \" + this.elStyles.paddingLeft;\n      this.wrapperEl.style.margin = \"-\" + this.elStyles.paddingTop + \" -\" + this.elStyles.paddingRight + \" -\" + this.elStyles.paddingBottom + \" -\" + this.elStyles.paddingLeft;\n      var contentElScrollHeight = this.contentEl.scrollHeight;\n      var contentElScrollWidth = this.contentEl.scrollWidth;\n      this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%'; // Determine placeholder size\n\n      this.placeholderEl.style.width = isWidthAuto ? contentElOffsetWidth + \"px\" : 'auto';\n      this.placeholderEl.style.height = contentElScrollHeight + \"px\";\n      var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n      this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;\n      this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow\n\n      this.axis.x.isOverflowing = elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n      this.axis.y.isOverflowing = elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n      this.axis.x.forceVisible = this.options.forceVisible === 'x' || this.options.forceVisible === true;\n      this.axis.y.forceVisible = this.options.forceVisible === 'y' || this.options.forceVisible === true;\n      this.hideNativeScrollbar(); // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n\n      var offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;\n      var offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n      this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n      this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;\n      this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n      this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n      this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + \"px\";\n      this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + \"px\";\n      this.positionScrollbar('x');\n      this.positionScrollbar('y');\n      this.toggleTrackVisibility('x');\n      this.toggleTrackVisibility('y');\n    }\n    /**\n     * Calculate scrollbar size\n     */\n    ;\n\n    _proto.getScrollbarSize = function getScrollbarSize(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      if (!this.axis[axis].isOverflowing) {\n        return 0;\n      }\n\n      var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n      var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n      var scrollbarSize;\n      var scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.\n\n      scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n\n      if (this.options.scrollbarMaxSize) {\n        scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n      }\n\n      return scrollbarSize;\n    };\n\n    _proto.positionScrollbar = function positionScrollbar(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      if (!this.axis[axis].isOverflowing) {\n        return;\n      }\n\n      var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n      var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n      var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n      var scrollbar = this.axis[axis].scrollbar;\n      var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n      scrollOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollOffset : scrollOffset;\n      var scrollPourcent = scrollOffset / (contentSize - hostSize);\n      var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n      handleOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? handleOffset + (trackSize - scrollbar.size) : handleOffset;\n      scrollbar.el.style.transform = axis === 'x' ? \"translate3d(\" + handleOffset + \"px, 0, 0)\" : \"translate3d(0, \" + handleOffset + \"px, 0)\";\n    };\n\n    _proto.toggleTrackVisibility = function toggleTrackVisibility(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      var track = this.axis[axis].track.el;\n      var scrollbar = this.axis[axis].scrollbar.el;\n\n      if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n        track.style.visibility = 'visible';\n        this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n      } else {\n        track.style.visibility = 'hidden';\n        this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n      } // Even if forceVisible is enabled, scrollbar itself should be hidden\n\n\n      if (this.axis[axis].isOverflowing) {\n        scrollbar.style.display = 'block';\n      } else {\n        scrollbar.style.display = 'none';\n      }\n    };\n\n    _proto.hideNativeScrollbar = function hideNativeScrollbar() {\n      this.offsetEl.style[this.isRtl ? 'left' : 'right'] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n      this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n    }\n    /**\n     * On scroll event handling\n     */\n    ;\n\n    _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();\n      this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n      var isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);\n\n      if (isWithinScrollbarBoundsX) {\n        this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n      } else {\n        this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n      }\n\n      if (this.isWithinBounds(this.axis[axis].track.rect)) {\n        this.showScrollbar(axis);\n        this.axis[axis].track.el.classList.add(this.classNames.hover);\n      } else {\n        this.axis[axis].track.el.classList.remove(this.classNames.hover);\n      }\n    };\n\n    _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    };\n    /**\n     * Show scrollbar\n     */\n\n\n    _proto.showScrollbar = function showScrollbar(axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      var scrollbar = this.axis[axis].scrollbar.el;\n\n      if (!this.axis[axis].isVisible) {\n        scrollbar.classList.add(this.classNames.visible);\n        this.axis[axis].isVisible = true;\n      }\n\n      if (this.options.autoHide) {\n        this.hideScrollbars();\n      }\n    }\n    /**\n     * Hide Scrollbar\n     */\n    ;\n    /**\n     * on scrollbar handle drag movement starts\n     */\n\n\n    _proto.onDragStart = function onDragStart(e, axis) {\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      var elDocument = getElementDocument(this.el);\n      var elWindow = getElementWindow(this.el);\n      var scrollbar = this.axis[axis].scrollbar; // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n\n      var eventOffset = axis === 'y' ? e.pageY : e.pageX;\n      this.axis[axis].dragOffset = eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n      this.draggedAxis = axis;\n      this.el.classList.add(this.classNames.dragging);\n      elDocument.addEventListener('mousemove', this.drag, true);\n      elDocument.addEventListener('mouseup', this.onEndDrag, true);\n\n      if (this.removePreventClickId === null) {\n        elDocument.addEventListener('click', this.preventClick, true);\n        elDocument.addEventListener('dblclick', this.preventClick, true);\n      } else {\n        elWindow.clearTimeout(this.removePreventClickId);\n        this.removePreventClickId = null;\n      }\n    }\n    /**\n     * Drag scrollbar handle\n     */\n    ;\n\n    _proto.onTrackClick = function onTrackClick(e, axis) {\n      var _this4 = this;\n\n      if (axis === void 0) {\n        axis = 'y';\n      }\n\n      if (!this.options.clickOnTrack) return;\n      var elWindow = getElementWindow(this.el);\n      this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n      var scrollbar = this.axis[axis].scrollbar;\n      var scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n      var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n      var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n      var t = axis === 'y' ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;\n      var dir = t < 0 ? -1 : 1;\n      var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n      var speed = 40;\n\n      var scrollTo = function scrollTo() {\n        if (dir === -1) {\n          if (scrolled > scrollSize) {\n            var _this4$contentWrapper;\n\n            scrolled -= speed;\n\n            _this4.contentWrapperEl.scrollTo((_this4$contentWrapper = {}, _this4$contentWrapper[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper));\n\n            elWindow.requestAnimationFrame(scrollTo);\n          }\n        } else {\n          if (scrolled < scrollSize) {\n            var _this4$contentWrapper2;\n\n            scrolled += speed;\n\n            _this4.contentWrapperEl.scrollTo((_this4$contentWrapper2 = {}, _this4$contentWrapper2[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper2));\n\n            elWindow.requestAnimationFrame(scrollTo);\n          }\n        }\n      };\n\n      scrollTo();\n    }\n    /**\n     * Getter for content element\n     */\n    ;\n\n    _proto.getContentElement = function getContentElement() {\n      return this.contentEl;\n    }\n    /**\n     * Getter for original scrolling element\n     */\n    ;\n\n    _proto.getScrollElement = function getScrollElement() {\n      return this.contentWrapperEl;\n    };\n\n    _proto.getScrollbarWidth = function getScrollbarWidth() {\n      // Try/catch for FF 56 throwing on undefined computedStyles\n      try {\n        // Detect browsers supporting CSS scrollbar styling and do not calculate\n        if (getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar').display === 'none' || 'scrollbarWidth' in document.documentElement.style || '-ms-overflow-style' in document.documentElement.style) {\n          return 0;\n        } else {\n          return scrollbarWidth();\n        }\n      } catch (e) {\n        return scrollbarWidth();\n      }\n    };\n\n    _proto.removeListeners = function removeListeners() {\n      var _this5 = this;\n\n      var elWindow = getElementWindow(this.el); // Event listeners\n\n      if (this.options.autoHide) {\n        this.el.removeEventListener('mouseenter', this.onMouseEnter);\n      }\n\n      ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n        _this5.el.removeEventListener(e, _this5.onPointerEvent, true);\n      });\n      ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n        _this5.el.removeEventListener(e, _this5.onPointerEvent, {\n          capture: true,\n          passive: true\n        });\n      });\n      this.el.removeEventListener('mousemove', this.onMouseMove);\n      this.el.removeEventListener('mouseleave', this.onMouseLeave);\n      this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n      elWindow.removeEventListener('resize', this.onWindowResize);\n      this.mutationObserver.disconnect();\n      this.resizeObserver.disconnect(); // Cancel all debounced functions\n\n      this.recalculate.cancel();\n      this.onMouseMove.cancel();\n      this.hideScrollbars.cancel();\n      this.onWindowResize.cancel();\n    }\n    /**\n     * UnMount mutation observer and delete SimpleBar instance from DOM element\n     */\n    ;\n\n    _proto.unMount = function unMount() {\n      this.removeListeners();\n      SimpleBar.instances[\"delete\"](this.el);\n    }\n    /**\n     * Check if mouse is within bounds\n     */\n    ;\n\n    _proto.isWithinBounds = function isWithinBounds(bbox) {\n      return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n    }\n    /**\n     * Find element children matches query\n     */\n    ;\n\n    _proto.findChild = function findChild(el, query) {\n      var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n      return Array.prototype.filter.call(el.children, function (child) {\n        return matches.call(child, query);\n      })[0];\n    };\n\n    return SimpleBar;\n  }();\n\n  SimpleBar.defaultOptions = {\n    autoHide: true,\n    forceVisible: false,\n    clickOnTrack: true,\n    classNames: {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging'\n    },\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n    timeout: 1000\n  };\n  SimpleBar.instances = new WeakMap();\n\n  SimpleBar.initDOMLoadedElements = function () {\n    document.removeEventListener('DOMContentLoaded', this.initDOMLoadedElements);\n    window.removeEventListener('load', this.initDOMLoadedElements);\n    Array.prototype.forEach.call(document.querySelectorAll('[data-simplebar]:not([data-simplebar=\"init\"])'), function (el) {\n      if (!SimpleBar.instances.has(el)) new SimpleBar(el, getOptions(el.attributes));\n    });\n  };\n\n  SimpleBar.removeObserver = function () {\n    this.globalObserver.disconnect();\n  };\n\n  SimpleBar.initHtmlApi = function () {\n    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this); // MutationObserver is IE11+\n\n    if (typeof MutationObserver !== 'undefined') {\n      // Mutation observer to observe dynamically added elements\n      this.globalObserver = new MutationObserver(SimpleBar.handleMutations);\n      this.globalObserver.observe(document, {\n        childList: true,\n        subtree: true\n      });\n    } // Taken from jQuery `ready` function\n    // Instantiate elements already present on the page\n\n\n    if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {\n      // Handle it asynchronously to allow scripts the opportunity to delay init\n      window.setTimeout(this.initDOMLoadedElements);\n    } else {\n      document.addEventListener('DOMContentLoaded', this.initDOMLoadedElements);\n      window.addEventListener('load', this.initDOMLoadedElements);\n    }\n  };\n\n  SimpleBar.handleMutations = function (mutations) {\n    mutations.forEach(function (mutation) {\n      Array.prototype.forEach.call(mutation.addedNodes, function (addedNode) {\n        if (addedNode.nodeType === 1) {\n          if (addedNode.hasAttribute('data-simplebar')) {\n            !SimpleBar.instances.has(addedNode) && new SimpleBar(addedNode, getOptions(addedNode.attributes));\n          } else {\n            Array.prototype.forEach.call(addedNode.querySelectorAll('[data-simplebar]:not([data-simplebar=\"init\"])'), function (el) {\n              !SimpleBar.instances.has(el) && new SimpleBar(el, getOptions(el.attributes));\n            });\n          }\n        }\n      });\n      Array.prototype.forEach.call(mutation.removedNodes, function (removedNode) {\n        if (removedNode.nodeType === 1) {\n          if (removedNode.hasAttribute('[data-simplebar=\"init\"]')) {\n            SimpleBar.instances.has(removedNode) && SimpleBar.instances.get(removedNode).unMount();\n          } else {\n            Array.prototype.forEach.call(removedNode.querySelectorAll('[data-simplebar=\"init\"]'), function (el) {\n              SimpleBar.instances.has(el) && SimpleBar.instances.get(el).unMount();\n            });\n          }\n        }\n      });\n    });\n  };\n\n  SimpleBar.getOptions = getOptions;\n  /**\n   * HTML API\n   * Called only in a browser env.\n   */\n\n  if (canUseDom) {\n    SimpleBar.initHtmlApi();\n  }\n\n  return SimpleBar;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/backend/js/simplebar.js\n");

/***/ }),

/***/ "./resources/assets/backend/js/app.js":
/*!********************************************!*\
  !*** ./resources/assets/backend/js/app.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _public_backend_js_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../public/backend/js/main.js */ \"./public/backend/js/main.js\");\n/* harmony import */ var _public_backend_js_main_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_public_backend_js_main_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _public_backend_js_custom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../public/backend/js/custom.js */ \"./public/backend/js/custom.js\");\n/* harmony import */ var _public_backend_js_custom_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_public_backend_js_custom_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _public_backend_js_simplebar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../public/backend/js/simplebar.js */ \"./public/backend/js/simplebar.js\");\n/* harmony import */ var _public_backend_js_simplebar_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_public_backend_js_simplebar_js__WEBPACK_IMPORTED_MODULE_2__);\n// require('./bootstrap');\n // import '../../../../public/backend/js/sweetalert.min.js';\n// import '../../../../public/backend/js/jquery.dataTables.min.js';\n// import '../../../../public/backend/js/dataTables.bootstrap4.min.js';\n// import '../../../../public/backend/js/avro-v1.1.4.min.js';\n// import '../../../../public/backend/js/bootstrap-datepicker.min.js';\n// import '../../../../public/backend/js/select2.min.js';\n\n // import '../../../../public/backend/js/jquery.validate.js';\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2JhY2tlbmQvanMvYXBwLmpzPzZmY2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtDQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Q0FFQSIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvYmFja2VuZC9qcy9hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZXF1aXJlKCcuL2Jvb3RzdHJhcCcpO1xyXG5cclxuaW1wb3J0ICcuLi8uLi8uLi8uLi9wdWJsaWMvYmFja2VuZC9qcy9tYWluLmpzJztcclxuLy8gaW1wb3J0ICcuLi8uLi8uLi8uLi9wdWJsaWMvYmFja2VuZC9qcy9zd2VldGFsZXJ0Lm1pbi5qcyc7XHJcbi8vIGltcG9ydCAnLi4vLi4vLi4vLi4vcHVibGljL2JhY2tlbmQvanMvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmpzJztcclxuLy8gaW1wb3J0ICcuLi8uLi8uLi8uLi9wdWJsaWMvYmFja2VuZC9qcy9kYXRhVGFibGVzLmJvb3RzdHJhcDQubWluLmpzJztcclxuLy8gaW1wb3J0ICcuLi8uLi8uLi8uLi9wdWJsaWMvYmFja2VuZC9qcy9hdnJvLXYxLjEuNC5taW4uanMnO1xyXG4vLyBpbXBvcnQgJy4uLy4uLy4uLy4uL3B1YmxpYy9iYWNrZW5kL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLm1pbi5qcyc7XHJcbi8vIGltcG9ydCAnLi4vLi4vLi4vLi4vcHVibGljL2JhY2tlbmQvanMvc2VsZWN0Mi5taW4uanMnO1xyXG5pbXBvcnQgJy4uLy4uLy4uLy4uL3B1YmxpYy9iYWNrZW5kL2pzL2N1c3RvbS5qcyc7XHJcbi8vIGltcG9ydCAnLi4vLi4vLi4vLi4vcHVibGljL2JhY2tlbmQvanMvanF1ZXJ5LnZhbGlkYXRlLmpzJztcclxuaW1wb3J0ICcuLi8uLi8uLi8uLi9wdWJsaWMvYmFja2VuZC9qcy9zaW1wbGViYXIuanMnOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/backend/js/app.js\n");

/***/ }),

/***/ 1:
/*!**************************************************!*\
  !*** multi ./resources/assets/backend/js/app.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\admin_6-0\resources\assets\backend\js\app.js */"./resources/assets/backend/js/app.js");


/***/ })

/******/ });